{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../GSN/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n * \n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n * \n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        // extcodesize checks the size of the code stored in an address, and\n        // address returns the current address. Since the code is still not\n        // deployed when running a constructor, any checks on its code size will\n        // yield zero, making it an effective way to detect if a contract is\n        // under construction or not.\n        address self = address(this);\n        uint256 cs;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { cs := extcodesize(self) }\n        return cs == 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../GSN/ContextUpgradeable.sol\";\nimport \"./IERC20Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../GSN/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SignedSafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMath {\n    int256 constant private _INT256_MIN = -2**255;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n        return c;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "contracts/AnkrVictim/AnkrStaker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"../Interfaces/IWombatBooster.sol\";\n\ninterface IBaseRewardPoolLocked {\n    function stakeFor(address, uint256) external;\n\n    function setLock(address[] calldata, uint256[] calldata) external;\n}\n\ncontract AnkrStaker is OwnableUpgradeable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    event Deposited(address indexed _user, uint256 _amount);\n\n    function initialize() public initializer {\n        __Ownable_init();\n    }\n\n    function depositFor(\n        address _booster,\n        uint256 _pid,\n        address[] calldata _users,\n        uint256[] calldata _amounts\n    ) external {\n        require(_booster != address(0), \"invalid _booster\");\n        require(_users.length == _amounts.length, \"invalid length\");\n\n        uint256 totalAmount = 0;\n        for (uint256 i = 0; i < _amounts.length; i++) {\n            totalAmount = totalAmount.add(_amounts[i]);\n        }\n        require(totalAmount > 0, \"invalid _amounts\");\n\n        (\n            address lptoken,\n            address token,\n            ,\n            address rewardPool,\n\n        ) = IWombatBooster(_booster).poolInfo(_pid);\n        IERC20(lptoken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            totalAmount\n        );\n\n        for (uint256 i = 0; i < _users.length; i++) {\n            address user = _users[i];\n            uint256 amount = _amounts[i];\n            require(user != address(0), \"invalid user\");\n            require(amount > 0, \"invalid amount\");\n\n            _approveTokenIfNeeded(lptoken, _booster, amount);\n            IWombatBooster(_booster).deposit(_pid, amount, false);\n\n            _approveTokenIfNeeded(token, rewardPool, amount);\n            IBaseRewardPoolLocked(rewardPool).stakeFor(user, amount);\n\n            emit Deposited(user, amount);\n        }\n\n        IBaseRewardPoolLocked(rewardPool).setLock(_users, _amounts);\n    }\n\n    function _approveTokenIfNeeded(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (IERC20(_token).allowance(address(this), _to) < _amount) {\n            IERC20(_token).safeApprove(_to, 0);\n            IERC20(_token).safeApprove(_to, type(uint256).max);\n        }\n    }\n}\n"
    },
    "contracts/AnkrVictim/BaseRewardPoolLocked.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"../BaseRewardPool.sol\";\n\ncontract BaseRewardPoolLocked is BaseRewardPool {\n    uint256 public unlockAt;\n    address public lockManager;\n\n    mapping(address => uint256) public lockedBalance;\n\n    event LockSet(address indexed _account, uint256 _amount);\n\n    function setUnlockAt(uint256 _unlockAt) external onlyOwner {\n        require(unlockAt == 0, \"already set\");\n        unlockAt = _unlockAt;\n    }\n\n    function setLockManager(address _lockManager) external onlyOwner {\n        lockManager = _lockManager;\n    }\n\n    function setLock(\n        address[] calldata _accounts,\n        uint256[] calldata _amounts\n    ) external {\n        require(msg.sender == lockManager, \"!auth\");\n        uint256 len = _accounts.length;\n        require(len == _amounts.length, \"!len\");\n\n        for (uint256 i = 0; i < len; i++) {\n            lockedBalance[_accounts[i]] = _amounts[i];\n            emit LockSet(_accounts[i], _amounts[i]);\n        }\n    }\n\n    function _withdraw(address _account, uint256 _amount) internal override {\n        super._withdraw(_account, _amount);\n        _checkLockedBalance(_account);\n    }\n\n    function _checkLockedBalance(address _account) internal view {\n        require(\n            block.timestamp > unlockAt ||\n                balanceOf(_account) >= lockedBalance[_account],\n            \"locked\"\n        );\n    }\n}\n"
    },
    "contracts/BaseRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n/**\n *Submitted for verification at Etherscan.io on 2020-07-17\n */\n\n/*\n   ____            __   __        __   _\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n     /___/\n\n* Synthetix: BaseRewardPool.sol\n*\n* Docs: https://docs.synthetix.io/\n*\n*\n* MIT License\n* ===========\n*\n* Copyright (c) 2020 Synthetix\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./Interfaces/IBaseRewardPool.sol\";\nimport \"./Interfaces/IWombatBooster.sol\";\nimport \"./lib/TransferHelper.sol\";\n\ncontract BaseRewardPool is IBaseRewardPool, OwnableUpgradeable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using TransferHelper for address;\n\n    address public operator;\n    address public booster;\n    uint256 public pid;\n\n    IERC20 public override stakingToken;\n    address[] public rewardTokens;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    struct Reward {\n        uint256 rewardPerTokenStored;\n        uint256 queuedRewards;\n    }\n\n    struct UserReward {\n        uint256 userRewardPerTokenPaid;\n        uint256 rewards;\n    }\n\n    mapping(address => Reward) public rewards;\n    mapping(address => bool) public isRewardToken;\n\n    mapping(address => mapping(address => UserReward)) public userRewards;\n\n    mapping(address => bool) public access;\n\n    mapping(address => bool) public grants;\n\n    mapping(address => uint256) public userLastTime;\n\n    mapping(address => uint256) public userAmountTime;\n\n    function initialize(address _operator) public initializer {\n        __Ownable_init();\n\n        operator = _operator;\n\n        emit OperatorUpdated(_operator);\n    }\n\n    function setParams(\n        address _booster,\n        uint256 _pid,\n        address _stakingToken,\n        address _rewardToken\n    ) external override {\n        require(msg.sender == owner() || msg.sender == operator, \"!auth\");\n\n        require(booster == address(0), \"params has already been set\");\n        require(_booster != address(0), \"invalid _booster!\");\n        require(_stakingToken != address(0), \"invalid _stakingToken!\");\n        require(_rewardToken != address(0), \"invalid _rewardToken!\");\n\n        booster = _booster;\n\n        pid = _pid;\n        stakingToken = IERC20(_stakingToken);\n\n        addRewardToken(_rewardToken);\n\n        access[_booster] = true;\n\n        emit BoosterUpdated(_booster);\n    }\n\n    function addRewardToken(address _rewardToken) internal {\n        require(_rewardToken != address(0), \"invalid _rewardToken!\");\n        if (isRewardToken[_rewardToken]) {\n            return;\n        }\n        rewardTokens.push(_rewardToken);\n        isRewardToken[_rewardToken] = true;\n\n        emit RewardTokenAdded(_rewardToken);\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    modifier updateReward(address _account) {\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            address rewardToken = rewardTokens[i];\n            UserReward storage userReward = userRewards[_account][rewardToken];\n            userReward.rewards = earned(_account, rewardToken);\n            userReward.userRewardPerTokenPaid = rewards[rewardToken]\n                .rewardPerTokenStored;\n        }\n\n        userAmountTime[_account] = getUserAmountTime(_account);\n        userLastTime[_account] = now;\n\n        _;\n    }\n\n    function getRewardTokens()\n        external\n        view\n        override\n        returns (address[] memory)\n    {\n        return rewardTokens;\n    }\n\n    function getRewardTokensLength() external view override returns (uint256) {\n        return rewardTokens.length;\n    }\n\n    function earned(address _account, address _rewardToken)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        Reward memory reward = rewards[_rewardToken];\n        UserReward memory userReward = userRewards[_account][_rewardToken];\n        return\n            balanceOf(_account)\n                .mul(\n                    reward.rewardPerTokenStored.sub(\n                        userReward.userRewardPerTokenPaid\n                    )\n                )\n                .div(1e18)\n                .add(userReward.rewards);\n    }\n\n    function getUserAmountTime(address _account)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        uint256 lastTime = userLastTime[_account];\n        if (lastTime == 0) {\n            return 0;\n        }\n        uint256 userBalance = _balances[_account];\n        if (userBalance == 0) {\n            return userAmountTime[_account];\n        }\n        return userAmountTime[_account].add(now.sub(lastTime).mul(userBalance));\n    }\n\n    function stake(uint256 _amount) public override updateReward(msg.sender) {\n        require(_amount > 0, \"RewardPool : Cannot stake 0\");\n\n        _totalSupply = _totalSupply.add(_amount);\n        _balances[msg.sender] = _balances[msg.sender].add(_amount);\n\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\n        emit Staked(msg.sender, _amount);\n    }\n\n    function stakeAll() external override {\n        uint256 balance = stakingToken.balanceOf(msg.sender);\n        stake(balance);\n    }\n\n    function stakeFor(address _for, uint256 _amount)\n        external\n        override\n        updateReward(_for)\n    {\n        require(_for != address(0), \"invalid _for!\");\n        require(_amount > 0, \"RewardPool : Cannot stake 0\");\n\n        //give to _for\n        _totalSupply = _totalSupply.add(_amount);\n        _balances[_for] = _balances[_for].add(_amount);\n\n        //take away from sender\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\n        emit Staked(_for, _amount);\n    }\n\n    function withdraw(uint256 amount) external override {\n        _withdraw(msg.sender, amount);\n    }\n\n    function withdrawAll() external override {\n        _withdraw(msg.sender, _balances[msg.sender]);\n    }\n\n    function withdrawFor(address _account, uint256 _amount) external override {\n        require(grants[msg.sender], \"!auth\");\n\n        _withdraw(_account, _amount);\n    }\n\n    function _withdraw(\n        address _account,\n        uint256 _amount\n    ) internal virtual updateReward(_account) {\n        require(_amount > 0, \"RewardPool : Cannot withdraw 0\");\n\n        _totalSupply = _totalSupply.sub(_amount);\n        _balances[_account] = _balances[_account].sub(_amount);\n\n        stakingToken.safeTransfer(_account, _amount);\n        emit Withdrawn(_account, _amount);\n\n        getReward(_account);\n    }\n\n    function getReward(address _account)\n        public\n        override\n        updateReward(_account)\n    {\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            address rewardToken = rewardTokens[i];\n            uint256 reward = earned(_account, rewardToken);\n            if (reward > 0) {\n                userRewards[_account][rewardToken].rewards = 0;\n                rewardToken.safeTransferToken(_account, reward);\n                IWombatBooster(booster).rewardClaimed(\n                    pid,\n                    _account,\n                    rewardToken,\n                    reward\n                );\n                emit RewardPaid(_account, rewardToken, reward);\n            }\n        }\n    }\n\n    function donate(address _rewardToken, uint256 _amount)\n        external\n        payable\n        override\n    {\n        require(isRewardToken[_rewardToken], \"invalid token\");\n        if (AddressLib.isPlatformToken(_rewardToken)) {\n            require(_amount == msg.value, \"invalid amount\");\n        } else {\n            require(msg.value == 0, \"invalid msg.value\");\n            IERC20(_rewardToken).safeTransferFrom(\n                msg.sender,\n                address(this),\n                _amount\n            );\n        }\n\n        rewards[_rewardToken].queuedRewards = rewards[_rewardToken]\n            .queuedRewards\n            .add(_amount);\n    }\n\n    function queueNewRewards(address _rewardToken, uint256 _rewards)\n        external\n        payable\n        override\n    {\n        require(access[msg.sender], \"!auth\");\n\n        addRewardToken(_rewardToken);\n\n        if (AddressLib.isPlatformToken(_rewardToken)) {\n            require(_rewards == msg.value, \"invalid amount\");\n        } else {\n            require(msg.value == 0, \"invalid msg.value\");\n            IERC20(_rewardToken).safeTransferFrom(\n                msg.sender,\n                address(this),\n                _rewards\n            );\n        }\n\n        Reward storage rewardInfo = rewards[_rewardToken];\n\n        if (totalSupply() == 0) {\n            rewardInfo.queuedRewards = rewardInfo.queuedRewards.add(_rewards);\n            return;\n        }\n\n        _rewards = _rewards.add(rewardInfo.queuedRewards);\n        rewardInfo.queuedRewards = 0;\n\n        rewardInfo.rewardPerTokenStored = rewardInfo.rewardPerTokenStored.add(\n            _rewards.mul(1e18).div(totalSupply())\n        );\n        emit RewardAdded(_rewardToken, _rewards);\n    }\n\n    function grant(address _address, bool _grant) external onlyOwner {\n        require(_address != address(0), \"invalid _address!\");\n\n        grants[_address] = _grant;\n        emit Granted(_address, _grant);\n    }\n\n    function setAccess(address _address, bool _status)\n        external\n        override\n        onlyOwner\n    {\n        require(_address != address(0), \"invalid _address!\");\n\n        access[_address] = _status;\n        emit AccessSet(_address, _status);\n    }\n\n    receive() external payable {}\n\n    uint256[100] private __gap;\n}\n"
    },
    "contracts/BribeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./lib/TransferHelper.sol\";\nimport \"./Interfaces/IBribeManager.sol\";\nimport \"./Interfaces/IDelegateVotePool.sol\";\nimport \"./Interfaces/INativeZapper.sol\";\nimport \"./Interfaces/IVirtualBalanceRewardPool.sol\";\nimport \"./Interfaces/IVlQuoV2.sol\";\nimport \"./Interfaces/IWombatVoterProxy.sol\";\nimport \"./Interfaces/Wombat/IVoter.sol\";\nimport \"./Interfaces/Wombat/IVeWom.sol\";\n\ncontract BribeManager is IBribeManager, OwnableUpgradeable {\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n    using SafeERC20 for IERC20;\n\n    IVoter public voter;\n    IVeWom public veWom;\n\n    IWombatVoterProxy public voterProxy;\n    IVlQuoV2 public vlQuoV2;\n    INativeZapper public nativeZapper;\n\n    address public delegatePool;\n\n    struct Pool {\n        address lpToken;\n        address rewarder;\n        bool isActive;\n    }\n\n    address[] public pools;\n    mapping(address => Pool) public poolInfos;\n\n    mapping(address => uint256) public poolTotalVote;\n    mapping(address => uint256) public userTotalVote;\n    mapping(address => mapping(address => uint256)) public userVoteForPools; // unit = vlQuo\n\n    uint256 public totalVlQuoInVote;\n    uint256 public lastCastTimer;\n    uint256 public castVotesCooldown;\n\n    function initialize() public initializer {\n        __Ownable_init();\n    }\n\n    function setParams(\n        address _voter,\n        address _voterProxy,\n        address _vlQuoV2,\n        address _nativeZapper,\n        address _delegatePool\n    ) external onlyOwner {\n        require(address(voter) == address(0), \"params have already been set\");\n\n        require(_voter != address(0), \"invalid _voter!\");\n        require(_voterProxy != address(0), \"invalid _voterProxy!\");\n        require(_vlQuoV2 != address(0), \"invalid _vlQuoV2!\");\n        require(_nativeZapper != address(0), \"invalid _nativeZapper!\");\n        require(_delegatePool != address(0), \"invalid _delegatePool!\");\n\n        voter = IVoter(_voter);\n        veWom = IVeWom(voter.veWom());\n\n        voterProxy = IWombatVoterProxy(_voterProxy);\n        vlQuoV2 = IVlQuoV2(_vlQuoV2);\n        nativeZapper = INativeZapper(_nativeZapper);\n\n        delegatePool = _delegatePool;\n\n        castVotesCooldown = 60;\n    }\n\n    function setDelegatePool(address _delegatePool) external onlyOwner {\n        require(_delegatePool != address(0), \"invalid _delegatePool!\");\n\n        delegatePool = _delegatePool;\n    }\n\n    function getUserTotalVote(address _user)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return userTotalVote[_user];\n    }\n\n    function getUserVoteForPool(address _lp, address _user)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return userVoteForPools[_user][_lp];\n    }\n\n    function getUserVoteForPools(address[] calldata _lps, address _user)\n        external\n        view\n        override\n        returns (uint256[] memory votes)\n    {\n        uint256 length = _lps.length;\n        votes = new uint256[](length);\n        for (uint256 i; i < length; i++) {\n            votes[i] = getUserVoteForPool(_lps[i], _user);\n        }\n    }\n\n    function getTotalVoteForPools(address[] calldata _lps)\n        external\n        view\n        returns (uint256[] memory vlQuoVotes)\n    {\n        uint256 length = _lps.length;\n        vlQuoVotes = new uint256[](length);\n        for (uint256 i; i < length; i++) {\n            vlQuoVotes[i] = poolTotalVote[_lps[i]];\n        }\n    }\n\n    function getPoolsLength() external view returns (uint256) {\n        return pools.length;\n    }\n\n    function getVeWomVoteForLp(address _lp) public view returns (uint256) {\n        return voter.getUserVotes(address(voterProxy), _lp);\n    }\n\n    function getVeWomVoteForLps(address[] calldata _lps)\n        external\n        view\n        returns (uint256[] memory votes)\n    {\n        uint256 length = _lps.length;\n        votes = new uint256[](length);\n        for (uint256 i; i < length; i++) {\n            votes[i] = getVeWomVoteForLp(_lps[i]);\n        }\n    }\n\n    function usedVote() public view returns (uint256) {\n        return veWom.usedVote(address(voterProxy));\n    }\n\n    function totalVotes() public view returns (uint256) {\n        return veWom.balanceOf(address(voterProxy));\n    }\n\n    function remainingVotes() external view returns (uint256) {\n        return totalVotes().sub(usedVote());\n    }\n\n    function addPool(address _lp, address _rewarder) external onlyOwner {\n        require(_lp != address(0), \"_lp ZERO ADDRESS\");\n        if (_lp != delegatePool) {\n            (, , , , , address gaugeManager, ) = voter.infos(_lp);\n            require(gaugeManager != address(0), \"gaugeManager ZERO ADDRESS\");\n        }\n\n        Pool memory pool = Pool({\n            lpToken: _lp,\n            rewarder: _rewarder,\n            isActive: true\n        });\n        if (_lp != delegatePool) {\n            pools.push(_lp); // we don't want the delegatePool in this array\n        }\n        poolInfos[_lp] = pool;\n        emit PoolAdded(_lp, _rewarder);\n    }\n\n    /// @notice Changes the votes to zero for all pools. Only internal.\n    function _resetVotes() internal {\n        uint256 length = pools.length;\n        address[] memory lpVote = new address[](length);\n        int256[] memory votes = new int256[](length);\n        address[] memory rewarders = new address[](length);\n        for (uint256 i; i < length; i++) {\n            Pool memory pool = poolInfos[pools[i]];\n            lpVote[i] = pool.lpToken;\n            votes[i] = -int256(getVeWomVoteForLp(pool.lpToken));\n            rewarders[i] = pool.rewarder;\n        }\n        voterProxy.vote(lpVote, votes, rewarders, address(0));\n        emit AllVoteReset();\n    }\n\n    function isPoolActive(address pool) external view override returns (bool) {\n        return poolInfos[pool].isActive;\n    }\n\n    function deactivatePool(address _lp) external onlyOwner {\n        poolInfos[_lp].isActive = false;\n    }\n\n    /// @notice Changes the votes to zero for all pools. Only internal.\n    /// @dev This would entirely kill all votings\n    function clearPools() external onlyOwner {\n        _resetVotes();\n        uint256 length = pools.length;\n        for (uint256 i; i < length; i++) {\n            poolInfos[pools[i]].isActive = false;\n        }\n        delete pools;\n    }\n\n    function removePool(uint256 _index) external onlyOwner {\n        uint256 length = pools.length;\n        pools[_index] = pools[length - 1];\n        pools.pop();\n    }\n\n    function getUserLocked(address _user) public view returns (uint256) {\n        return\n            _user == delegatePool\n                ? poolTotalVote[delegatePool]\n                : vlQuoV2.balanceOf(_user);\n    }\n\n    /// @notice Vote on pools. Need to compute the delta prior to casting this.\n    function vote(address[] calldata _lps, int256[] calldata _deltas)\n        external\n        override\n    {\n        uint256 length = _lps.length;\n        int256 totalUserVote;\n        for (uint256 i; i < length; i++) {\n            Pool memory pool = poolInfos[_lps[i]];\n            require(pool.isActive, \"Not active\");\n            int256 delta = _deltas[i];\n            totalUserVote = totalUserVote.add(delta);\n            if (delta != 0) {\n                if (delta > 0) {\n                    poolTotalVote[pool.lpToken] = poolTotalVote[pool.lpToken]\n                        .add(uint256(delta));\n                    userTotalVote[msg.sender] = userTotalVote[msg.sender].add(\n                        uint256(delta)\n                    );\n                    userVoteForPools[msg.sender][\n                        pool.lpToken\n                    ] = userVoteForPools[msg.sender][pool.lpToken].add(\n                        uint256(delta)\n                    );\n                    IVirtualBalanceRewardPool(pool.rewarder).stakeFor(\n                        msg.sender,\n                        uint256(delta)\n                    );\n                } else {\n                    poolTotalVote[pool.lpToken] = poolTotalVote[pool.lpToken]\n                        .sub(uint256(-delta));\n                    userTotalVote[msg.sender] = userTotalVote[msg.sender].sub(\n                        uint256(-delta)\n                    );\n                    userVoteForPools[msg.sender][\n                        pool.lpToken\n                    ] = userVoteForPools[msg.sender][pool.lpToken].sub(\n                        uint256(-delta)\n                    );\n                    IVirtualBalanceRewardPool(pool.rewarder).withdrawFor(\n                        msg.sender,\n                        uint256(-delta)\n                    );\n                }\n\n                emit VoteUpdated(\n                    msg.sender,\n                    pool.lpToken,\n                    userVoteForPools[msg.sender][pool.lpToken]\n                );\n            }\n        }\n        if (msg.sender != delegatePool) {\n            // this already gets updated when a user vote for the delegate pool\n            if (totalUserVote > 0) {\n                totalVlQuoInVote = totalVlQuoInVote.add(uint256(totalUserVote));\n            } else {\n                totalVlQuoInVote = totalVlQuoInVote.sub(\n                    uint256(-totalUserVote)\n                );\n            }\n        }\n        require(\n            userTotalVote[msg.sender] <= getUserLocked(msg.sender),\n            \"Above vote limit\"\n        );\n    }\n\n    /// @notice Unvote from an inactive pool. This makes it so that deleting a pool, or changing a rewarder doesn't block users from withdrawing\n    function unvote(address _lp) external override {\n        Pool memory pool = poolInfos[_lp];\n        uint256 currentVote = userVoteForPools[msg.sender][pool.lpToken];\n        if (currentVote == 0) {\n            return;\n        }\n        require(!pool.isActive, \"Active\");\n        poolTotalVote[pool.lpToken] = poolTotalVote[pool.lpToken].sub(\n            currentVote\n        );\n        userTotalVote[msg.sender] = userTotalVote[msg.sender].sub(currentVote);\n        userVoteForPools[msg.sender][pool.lpToken] = 0;\n        IVirtualBalanceRewardPool(pool.rewarder).withdrawFor(\n            msg.sender,\n            currentVote\n        );\n        if (msg.sender != delegatePool) {\n            totalVlQuoInVote = totalVlQuoInVote.sub(currentVote);\n        }\n\n        emit VoteUpdated(\n            msg.sender,\n            pool.lpToken,\n            userVoteForPools[msg.sender][pool.lpToken]\n        );\n    }\n\n    /// @notice cast all pending votes\n    /// @notice this function will be gas intensive, hence a fee is given to the caller\n    function castVotes(bool _swapForNative)\n        public\n        returns (\n            address[][] memory finalRewardTokens,\n            uint256[][] memory finalFeeAmounts\n        )\n    {\n        require(\n            block.timestamp - lastCastTimer > castVotesCooldown,\n            \"Last cast too recent\"\n        );\n        lastCastTimer = block.timestamp;\n        uint256 length = pools.length;\n        address[] memory lpVote = new address[](length);\n        int256[] memory votes = new int256[](length);\n        address[] memory rewarders = new address[](length);\n        for (uint256 i; i < length; i++) {\n            Pool memory pool = poolInfos[pools[i]];\n            lpVote[i] = pool.lpToken;\n            rewarders[i] = pool.rewarder;\n\n            uint256 currentVote = getVeWomVoteForLp(pool.lpToken);\n            uint256 targetVote = poolTotalVote[pool.lpToken]\n                .mul(totalVotes())\n                .div(totalVlQuoInVote);\n            if (targetVote >= currentVote) {\n                votes[i] = int256(targetVote.sub(currentVote));\n            } else {\n                votes[i] = int256(targetVote).sub(int256(currentVote));\n            }\n        }\n        (\n            address[][] memory rewardTokens,\n            uint256[][] memory feeAmounts\n        ) = voterProxy.vote(lpVote, votes, rewarders, msg.sender);\n\n        finalRewardTokens = new address[][](length);\n        finalFeeAmounts = new uint256[][](length);\n        if (_swapForNative) {\n            for (uint256 i = 0; i < length; i++) {\n                finalRewardTokens[i] = new address[](1);\n                finalRewardTokens[i][0] = AddressLib.PLATFORM_TOKEN_ADDRESS;\n                finalFeeAmounts[i] = new uint256[](1);\n                finalFeeAmounts[i][0] = finalFeeAmounts[i][0].add(\n                    _swapFeesForNative(\n                        rewardTokens[i],\n                        feeAmounts[i],\n                        msg.sender\n                    )\n                );\n            }\n        } else {\n            for (uint256 i = 0; i < length; i++) {\n                _forwardRewards(rewardTokens[i], feeAmounts[i]);\n                finalRewardTokens[i] = rewardTokens[i];\n                finalFeeAmounts[i] = feeAmounts[i];\n            }\n        }\n    }\n\n    /// @notice Cast a zero vote to harvest the bribes of selected pools\n    /// @notice this function has a lesser importance than casting votes, hence no rewards will be given to the caller.\n    function harvestPools(address[] calldata _lps) external {\n        uint256 length = _lps.length;\n        int256[] memory votes = new int256[](length);\n        address[] memory rewarders = new address[](length);\n        for (uint256 i; i < length; i++) {\n            address lp = _lps[i];\n            Pool memory pool = poolInfos[lp];\n            rewarders[i] = pool.rewarder;\n            votes[i] = 0;\n        }\n        voterProxy.vote(_lps, votes, rewarders, address(0));\n    }\n\n    /// @notice Harvests user rewards for each pool\n    /// @notice If bribes weren't harvested, this might be lower than actual current value\n    function getRewardForPools(address[] calldata _lps) external {\n        uint256 length = _lps.length;\n        for (uint256 i; i < length; i++) {\n            if (_lps[i] == delegatePool) {\n                IDelegateVotePool(delegatePool).getReward(msg.sender);\n            } else {\n                IVirtualBalanceRewardPool(poolInfos[_lps[i]].rewarder)\n                    .getReward(msg.sender);\n            }\n        }\n    }\n\n    /// @notice Harvests user rewards for each pool where he has voted\n    /// @notice If bribes weren't harvested, this might be lower than actual current value\n    function getRewardAll()\n        external\n        override\n        returns (\n            address[][] memory rewardTokens,\n            uint256[][] memory earnedRewards\n        )\n    {\n        address[] memory delegatePoolRewardTokens;\n        uint256[] memory delegatePoolRewardAmounts;\n        if (userVoteForPools[msg.sender][delegatePool] > 0) {\n            (\n                delegatePoolRewardTokens,\n                delegatePoolRewardAmounts\n            ) = IDelegateVotePool(delegatePool).getReward(msg.sender);\n        }\n        uint256 length = pools.length;\n        rewardTokens = new address[][](length + 1);\n        earnedRewards = new uint256[][](length + 1);\n        for (uint256 i; i < length; i++) {\n            Pool memory pool = poolInfos[pools[i]];\n            if (userVoteForPools[msg.sender][pool.lpToken] > 0) {\n                rewardTokens[i] = IVirtualBalanceRewardPool(pool.rewarder)\n                    .getRewardTokens();\n                earnedRewards[i] = new uint256[](rewardTokens[i].length);\n                for (uint256 j = 0; j < rewardTokens[i].length; j++) {\n                    earnedRewards[i][j] = IVirtualBalanceRewardPool(\n                        pool.rewarder\n                    ).earned(msg.sender, rewardTokens[i][j]);\n                }\n\n                IVirtualBalanceRewardPool(pool.rewarder).getReward(msg.sender);\n            }\n        }\n\n        rewardTokens[length] = delegatePoolRewardTokens;\n        earnedRewards[length] = delegatePoolRewardAmounts;\n    }\n\n    function previewNativeAmountForCast(address[] calldata _lps)\n        external\n        view\n        returns (uint256)\n    {\n        (\n            address[][] memory rewardTokens,\n            uint256[][] memory amounts\n        ) = voterProxy.pendingBribeCallerFee(_lps);\n        uint256 feeAmount = 0;\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            for (uint256 j = 0; j < rewardTokens[i].length; j++) {\n                if (amounts[i][j] == 0) {\n                    continue;\n                }\n                if (rewardTokens[i][j] == AddressLib.PLATFORM_TOKEN_ADDRESS) {\n                    feeAmount = feeAmount.add(amounts[i][j]);\n                } else {\n                    feeAmount = feeAmount.add(\n                        nativeZapper.getAmountOut(\n                            rewardTokens[i][j],\n                            amounts[i][j]\n                        )\n                    );\n                }\n            }\n        }\n        return feeAmount;\n    }\n\n    function earned(address _lp, address _for)\n        external\n        view\n        returns (address[] memory rewardTokens, uint256[] memory amounts)\n    {\n        Pool memory pool = poolInfos[_lp];\n        rewardTokens = IVirtualBalanceRewardPool(pool.rewarder)\n            .getRewardTokens();\n        uint256 length = rewardTokens.length;\n        amounts = new uint256[](length);\n        for (uint256 index; index < length; ++index) {\n            amounts[index] = IVirtualBalanceRewardPool(pool.rewarder).earned(\n                _for,\n                rewardTokens[index]\n            );\n        }\n    }\n\n    function _forwardRewards(\n        address[] memory _rewardTokens,\n        uint256[] memory _feeAmounts\n    ) internal {\n        uint256 length = _rewardTokens.length;\n        for (uint256 i; i < length; i++) {\n            if (_rewardTokens[i] != address(0) && _feeAmounts[i] > 0) {\n                TransferHelper.safeTransferToken(\n                    _rewardTokens[i],\n                    msg.sender,\n                    _feeAmounts[i]\n                );\n            }\n        }\n    }\n\n    function _swapFeesForNative(\n        address[] memory rewardTokens,\n        uint256[] memory feeAmounts,\n        address _receiver\n    ) internal returns (uint256 nativeAmount) {\n        uint256 length = rewardTokens.length;\n        for (uint256 i; i < length; i++) {\n            if (feeAmounts[i] == 0) {\n                continue;\n            }\n            if (AddressLib.isPlatformToken(rewardTokens[i])) {\n                nativeAmount = nativeAmount.add(feeAmounts[i]);\n                TransferHelper.safeTransferETH(_receiver, feeAmounts[i]);\n            } else {\n                _approveTokenIfNeeded(\n                    rewardTokens[i],\n                    address(nativeZapper),\n                    feeAmounts[i]\n                );\n                nativeAmount = nativeAmount.add(\n                    nativeZapper.zapInToken(\n                        rewardTokens[i],\n                        feeAmounts[i],\n                        _receiver\n                    )\n                );\n            }\n        }\n    }\n\n    function _approveTokenIfNeeded(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (IERC20(_token).allowance(address(this), _to) < _amount) {\n            IERC20(_token).safeApprove(_to, 0);\n            IERC20(_token).safeApprove(_to, type(uint256).max);\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/CakeLpLocker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\n\nimport \"./lib/ManagerUpgradeable.sol\";\nimport \"./Interfaces/Pancake/IPancakePair.sol\";\nimport \"./Interfaces/IVlQuoV2.sol\";\nimport \"./Interfaces/ILpLocker.sol\";\n\ncontract CakeLpLocker is\n    ILpLocker,\n    ManagerUpgradeable,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable\n{\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address public token;\n\n    IVlQuoV2 public vlQuoV2;\n    IERC20 public quo;\n\n    uint256 public multiplier;\n\n    uint256 public constant WEEK = 86400 * 7;\n    uint256 public constant MAX_LOCK_WEEKS = 52;\n\n    uint256 public maxLockLength;\n\n    address public treasury;\n\n    uint256 public constant FEE_DENOMINATOR = 10000;\n\n    struct LockInfo {\n        uint256 amount;\n        uint256 vlQuoAmount;\n        uint256 lockTime;\n        uint256 unlockTime;\n    }\n\n    mapping(address => LockInfo[]) public userLocks;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    function initialize() public initializer {\n        __ManagerUpgradeable_init();\n\n        __ReentrancyGuard_init_unchained();\n\n        __Pausable_init_unchained();\n    }\n\n    function setParams(\n        address _token,\n        address _vlquoV2,\n        address _treasury\n    ) external onlyOwner {\n        require(address(token) == address(0), \"params have already been set\");\n\n        require(_token != address(0), \"invalid _token!\");\n        require(_vlquoV2 != address(0), \"invalid _vlquoV2!\");\n        require(_treasury != address(0), \"invalid _treasury!\");\n\n        token = _token;\n        vlQuoV2 = IVlQuoV2(_vlquoV2);\n        quo = vlQuoV2.quo();\n        treasury = _treasury;\n\n        maxLockLength = 10000;\n        multiplier = 10000;\n    }\n\n    function setMultiplier(uint256 _multiplier) external onlyManager {\n        multiplier = _multiplier;\n    }\n\n    function pause() external onlyManager {\n        _pause();\n    }\n\n    function unpause() external onlyManager {\n        _unpause();\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _user) public view override returns (uint256) {\n        return _balances[_user];\n    }\n\n    function getUserLocks(\n        address _user\n    ) external view returns (LockInfo[] memory) {\n        return userLocks[_user];\n    }\n\n    function lock(\n        address _user,\n        uint256 _amount,\n        uint256 _weeks\n    ) external override nonReentrant whenNotPaused {\n        require(_user != address(0), \"invalid _user!\");\n        require(\n            msg.sender == _user || !vlQuoV2.blockThirdPartyActions(_user),\n            \"Cannot lock on behalf of this account\"\n        );\n\n        require(_weeks > 0, \"Min 1 week\");\n        require(_weeks <= MAX_LOCK_WEEKS, \"Exceeds MAX_LOCK_WEEKS\");\n        require(_amount > 0, \"Amount must be nonzero\");\n\n        require(userLocks[_user].length < maxLockLength, \"locks too much\");\n\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint256 vlQuoAmount = _getVlQuoAmount(_amount, _weeks);\n        uint256 unlockTime = _getNextWeek().add(_weeks.mul(WEEK));\n        userLocks[_user].push(\n            LockInfo(_amount, vlQuoAmount, block.timestamp, unlockTime)\n        );\n\n        _totalSupply = _totalSupply.add(_amount);\n        _balances[_user] = _balances[_user].add(_amount);\n\n        vlQuoV2.increaseBalance(_user, vlQuoAmount);\n\n        emit Locked(_user, _amount, _weeks);\n    }\n\n    function unlock(\n        uint256 _slot\n    ) external override nonReentrant whenNotPaused {\n        uint256 length = userLocks[msg.sender].length;\n        require(_slot < length, \"wut?\");\n\n        LockInfo memory lockInfo = userLocks[msg.sender][_slot];\n        require(lockInfo.unlockTime <= block.timestamp, \"not yet meh\");\n\n        _totalSupply = _totalSupply.sub(lockInfo.amount);\n        _balances[msg.sender] = _balances[msg.sender].sub(lockInfo.amount);\n\n        uint256 punishment;\n        {\n            uint256 unlockGracePeriod = vlQuoV2.unlockGracePeriod();\n            if (block.timestamp > lockInfo.unlockTime.add(unlockGracePeriod)) {\n                punishment = block\n                    .timestamp\n                    .sub(lockInfo.unlockTime.add(unlockGracePeriod))\n                    .div(WEEK)\n                    .add(1)\n                    .mul(vlQuoV2.unlockPunishment())\n                    .mul(lockInfo.amount)\n                    .div(FEE_DENOMINATOR);\n                punishment = Math.min(punishment, lockInfo.amount);\n            }\n        }\n\n        // remove slot\n        if (_slot != length - 1) {\n            userLocks[msg.sender][_slot] = userLocks[msg.sender][length - 1];\n        }\n        userLocks[msg.sender].pop();\n\n        if (punishment > 0) {\n            _safeTransferToken(token, treasury, punishment);\n        }\n        _safeTransferToken(token, msg.sender, lockInfo.amount.sub(punishment));\n\n        vlQuoV2.decreaseBalance(msg.sender, lockInfo.vlQuoAmount);\n\n        emit Unlocked(\n            msg.sender,\n            lockInfo.unlockTime,\n            lockInfo.amount,\n            lockInfo.vlQuoAmount\n        );\n    }\n\n    function getVlQuoAmount(\n        uint256 _amount,\n        uint256 _weeks\n    ) external view returns (uint256) {\n        return _getVlQuoAmount(_amount, _weeks);\n    }\n\n    function _safeTransferToken(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        uint256 tokenBal = IERC20(_token).balanceOf(address(this));\n        if (_amount > tokenBal) {\n            _amount = tokenBal;\n        }\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n\n    function _getVlQuoAmount(\n        uint256 _amount,\n        uint256 _weeks\n    ) internal view returns (uint256) {\n        return\n            _amount\n                .mul(quo.balanceOf(token))\n                .div(IPancakePair(token).totalSupply())\n                .mul(_weeks)\n                .mul(multiplier)\n                .div(FEE_DENOMINATOR);\n    }\n\n    function _getCurWeek() internal view returns (uint256) {\n        return block.timestamp.div(WEEK).mul(WEEK);\n    }\n\n    function _getNextWeek() internal view returns (uint256) {\n        return _getCurWeek().add(WEEK);\n    }\n}\n"
    },
    "contracts/Campaigns/CampaignRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nimport \"../lib/TransferHelper.sol\";\nimport \"../lib/ManagerUpgradeable.sol\";\nimport \"../Interfaces/IVlQuoV2.sol\";\n\ncontract CampaignRewardPool is ManagerUpgradeable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using TransferHelper for address;\n\n    IERC20 public stakingToken;\n    address public quo;\n    address public vlQuoV2;\n    address public treasury;\n\n    uint256 public constant DENOMINATOR = 10000;\n    uint256 public lockWeeks;\n    uint256 public penalty;\n\n    uint256 public duration;\n    uint256 public periodFinish;\n    uint256 public rewardRate;\n    uint256 public lastUpdateTime;\n    uint256 public rewardPerTokenStored;\n\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    event RewardAdded(uint256 _rewards);\n    event Staked(address indexed _user, uint256 _amount);\n    event Withdrawn(address indexed _user, uint256 _amount);\n    event RewardPaid(address indexed _user, uint256 _reward);\n\n    function initialize() public initializer {\n        __ManagerUpgradeable_init();\n    }\n\n    function setParams(\n        address _stakingToken,\n        address _quo,\n        address _vlquoV2,\n        address _treasury\n    ) external onlyOwner {\n        require(quo == address(0), \"params have already been set\");\n\n        require(_stakingToken != address(0), \"invalid _stakingToken!\");\n        require(_quo != address(0), \"invalid _quo!\");\n        require(_vlquoV2 != address(0), \"invalid _vlquoV2!\");\n        require(_treasury != address(0), \"invalid _treasury!\");\n\n        stakingToken = IERC20(_stakingToken);\n        quo = _quo;\n        vlQuoV2 = _vlquoV2;\n        treasury = _treasury;\n    }\n\n    function initPool(\n        uint256 _lockWeeks,\n        uint256 _penalty,\n        uint256 _duration\n    ) external onlyManager {\n        require(rewardRate == 0, \"!one time\");\n\n        require(_lockWeeks > 0, \"invalid _lockWeeks!\");\n        require(_penalty >= 0, \"invalid _penalty!\");\n        require(_penalty <= DENOMINATOR, \"invalid _penalty!\");\n        require(_duration > 0, \"invalid _duration!\");\n\n        lockWeeks = _lockWeeks;\n        penalty = _penalty;\n        duration = _duration;\n\n        uint256 rewardsAvailable = IERC20(quo).balanceOf(address(this));\n        require(rewardsAvailable > 0, \"!balance\");\n\n        rewardRate = rewardsAvailable.div(duration);\n\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp.add(duration);\n\n        IERC20(quo).safeApprove(vlQuoV2, type(uint256).max);\n\n        emit RewardAdded(rewardsAvailable);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    modifier updateReward(address _user) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n\n        if (_user != address(0)) {\n            rewards[_user] = earned(_user);\n            userRewardPerTokenPaid[_user] = rewardPerTokenStored;\n        }\n\n        _;\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return Math.min(block.timestamp, periodFinish);\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        if (totalSupply() == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n            rewardPerTokenStored.add(\n                lastTimeRewardApplicable()\n                    .sub(lastUpdateTime)\n                    .mul(rewardRate)\n                    .mul(1e18)\n                    .div(totalSupply())\n            );\n    }\n\n    function earned(address _user) public view returns (uint256) {\n        return\n            balanceOf(_user)\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[_user]))\n                .div(1e18)\n                .add(rewards[_user]);\n    }\n\n    function stake(uint256 _amount) external updateReward(msg.sender) {\n        require(_amount > 0, \"RewardPool : Cannot stake 0\");\n\n        _totalSupply = _totalSupply.add(_amount);\n        _balances[msg.sender] = _balances[msg.sender].add(_amount);\n\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\n        emit Staked(msg.sender, _amount);\n    }\n\n    function withdraw(\n        uint256 _amount,\n        bool _lock\n    ) external updateReward(msg.sender) {\n        require(_amount > 0, \"RewardPool : Cannot withdraw 0\");\n\n        _totalSupply = _totalSupply.sub(_amount);\n        _balances[msg.sender] = _balances[msg.sender].sub(_amount);\n\n        stakingToken.safeTransfer(msg.sender, _amount);\n        emit Withdrawn(msg.sender, _amount);\n\n        getReward(_lock);\n    }\n\n    function getReward(bool _lock) public updateReward(msg.sender) {\n        uint256 reward = earned(msg.sender);\n        if (reward > 0) {\n            rewards[msg.sender] = 0;\n            if (_lock) {\n                // lock 6 weeks\n                IVlQuoV2(vlQuoV2).lock(msg.sender, reward, lockWeeks);\n            } else {\n                uint256 penaltyAmount = reward.mul(penalty).div(DENOMINATOR);\n                IERC20(quo).safeTransfer(treasury, penaltyAmount);\n                IERC20(quo).safeTransfer(msg.sender, reward.sub(penaltyAmount));\n            }\n            emit RewardPaid(msg.sender, reward);\n        }\n    }\n}\n"
    },
    "contracts/Campaigns/CampaignRewardPoolV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nimport \"../lib/TransferHelper.sol\";\nimport \"../lib/ManagerUpgradeable.sol\";\nimport \"../Interfaces/IVlQuoV2.sol\";\nimport \"../Interfaces/IWomDepositor.sol\";\n\ncontract CampaignRewardPoolV2 is ManagerUpgradeable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using TransferHelper for address;\n\n    IERC20 public stakingToken;\n    address public wom;\n    address public quo;\n    address public womDepositor;\n    address public vlQuoV2;\n    address public treasury;\n\n    uint256 public constant DENOMINATOR = 10000;\n    uint256 public lockWeeks;\n    uint256 public penalty;\n\n    uint256 public duration;\n    uint256 public periodFinish;\n    uint256 public rewardRate;\n    uint256 public lastUpdateTime;\n    uint256 public rewardPerTokenStored;\n\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    event RewardAdded(uint256 _rewards);\n    event Staked(address indexed _user, uint256 _amount);\n    event Withdrawn(address indexed _user, uint256 _amount);\n    event RewardPaid(address indexed _user, uint256 _reward);\n\n    function initialize() public initializer {\n        __ManagerUpgradeable_init();\n    }\n\n    function setParams(\n        address _stakingToken,\n        address _wom,\n        address _quo,\n        address _womDepositor,\n        address _vlquoV2,\n        address _treasury\n    ) external onlyOwner {\n        require(quo == address(0), \"params have already been set\");\n\n        require(_stakingToken != address(0), \"invalid _stakingToken!\");\n        require(_wom != address(0), \"invalid _wom!\");\n        require(_quo != address(0), \"invalid _quo!\");\n        require(_womDepositor != address(0), \"invalid _womDepositor!\");\n        require(_vlquoV2 != address(0), \"invalid _vlquoV2!\");\n        require(_treasury != address(0), \"invalid _treasury!\");\n\n        stakingToken = IERC20(_stakingToken);\n        wom = _wom;\n        quo = _quo;\n        womDepositor = _womDepositor;\n        vlQuoV2 = _vlquoV2;\n        treasury = _treasury;\n    }\n\n    function initPool(\n        uint256 _lockWeeks,\n        uint256 _penalty,\n        uint256 _duration\n    ) external onlyManager {\n        require(rewardRate == 0, \"!one time\");\n\n        require(_lockWeeks > 0, \"invalid _lockWeeks!\");\n        require(_penalty >= 0, \"invalid _penalty!\");\n        require(_penalty <= DENOMINATOR, \"invalid _penalty!\");\n        require(_duration > 0, \"invalid _duration!\");\n\n        lockWeeks = _lockWeeks;\n        penalty = _penalty;\n        duration = _duration;\n\n        uint256 rewardsAvailable = IERC20(quo).balanceOf(address(this));\n        require(rewardsAvailable > 0, \"!balance\");\n\n        rewardRate = rewardsAvailable.div(duration);\n\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp.add(duration);\n\n        IERC20(quo).safeApprove(vlQuoV2, type(uint256).max);\n\n        emit RewardAdded(rewardsAvailable);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    modifier updateReward(address _user) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n\n        if (_user != address(0)) {\n            rewards[_user] = earned(_user);\n            userRewardPerTokenPaid[_user] = rewardPerTokenStored;\n        }\n\n        _;\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return Math.min(block.timestamp, periodFinish);\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        if (totalSupply() == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n            rewardPerTokenStored.add(\n                lastTimeRewardApplicable()\n                    .sub(lastUpdateTime)\n                    .mul(rewardRate)\n                    .mul(1e18)\n                    .div(totalSupply())\n            );\n    }\n\n    function earned(address _user) public view returns (uint256) {\n        return\n            balanceOf(_user)\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[_user]))\n                .div(1e18)\n                .add(rewards[_user]);\n    }\n\n    function stake(uint256 _amount) external updateReward(msg.sender) {\n        require(_amount > 0, \"RewardPool : Cannot stake 0\");\n\n        _totalSupply = _totalSupply.add(_amount);\n        _balances[msg.sender] = _balances[msg.sender].add(_amount);\n\n        IERC20(wom).safeTransferFrom(msg.sender, address(this), _amount);\n        _approveTokenIfNeeded(wom, womDepositor, _amount);\n        IWomDepositor(womDepositor).deposit(_amount, false);\n\n        emit Staked(msg.sender, _amount);\n    }\n\n    function withdraw(\n        uint256 _amount,\n        bool _lock\n    ) external updateReward(msg.sender) {\n        require(_amount > 0, \"RewardPool : Cannot withdraw 0\");\n\n        _totalSupply = _totalSupply.sub(_amount);\n        _balances[msg.sender] = _balances[msg.sender].sub(_amount);\n\n        stakingToken.safeTransfer(msg.sender, _amount);\n        emit Withdrawn(msg.sender, _amount);\n\n        getReward(_lock);\n    }\n\n    function getReward(bool _lock) public updateReward(msg.sender) {\n        uint256 reward = earned(msg.sender);\n        if (reward > 0) {\n            rewards[msg.sender] = 0;\n            if (_lock) {\n                // lock 6 weeks\n                IVlQuoV2(vlQuoV2).lock(msg.sender, reward, lockWeeks);\n            } else {\n                uint256 penaltyAmount = reward.mul(penalty).div(DENOMINATOR);\n                IERC20(quo).safeTransfer(treasury, penaltyAmount);\n                IERC20(quo).safeTransfer(msg.sender, reward.sub(penaltyAmount));\n            }\n            emit RewardPaid(msg.sender, reward);\n        }\n    }\n\n    function _approveTokenIfNeeded(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (IERC20(_token).allowance(address(this), _to) < _amount) {\n            IERC20(_token).safeApprove(_to, 0);\n            IERC20(_token).safeApprove(_to, type(uint256).max);\n        }\n    }\n}\n"
    },
    "contracts/DelegateVotePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nimport \"./lib/ManagerUpgradeable.sol\";\nimport \"./lib/TransferHelper.sol\";\nimport \"./Interfaces/IBribeManager.sol\";\nimport \"./Interfaces/INativeZapper.sol\";\nimport \"./Interfaces/IVirtualBalanceRewardPool.sol\";\n\ncontract DelegateVotePool is ManagerUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using TransferHelper for address;\n\n    address public quo;\n    address public bribeManager;\n    IVirtualBalanceRewardPool public rewardPool;\n    INativeZapper public nativeZapper;\n\n    address public feeCollector;\n\n    uint256 public constant DENOMINATOR = 10000;\n    uint256 public protocolFee;\n\n    address[] public votePools;\n    mapping(address => bool) public isVotePool;\n    mapping(address => uint256) public votingWeights;\n    uint256 public totalWeight;\n\n    event QuoHarvested(uint256 _amount, uint256 _fee);\n\n    function initialize() public initializer {\n        __ManagerUpgradeable_init();\n    }\n\n    function setParams(\n        address _quo,\n        address _bribeManager,\n        address _rewardPool,\n        address _nativeZapper,\n        address _feeCollector\n    ) external onlyOwner {\n        require(bribeManager == address(0), \"params have already been set\");\n\n        require(_quo != address(0), \"invalid _quo!\");\n        require(_bribeManager != address(0), \"invalid _bribeManager!\");\n        require(_rewardPool != address(0), \"invalid _rewardPool!\");\n        require(_nativeZapper != address(0), \"invalid _nativeZapper!\");\n        require(_feeCollector != address(0), \"invalid _feeCollector!\");\n\n        quo = _quo;\n        bribeManager = _bribeManager;\n        rewardPool = IVirtualBalanceRewardPool(_rewardPool);\n        nativeZapper = INativeZapper(_nativeZapper);\n        feeCollector = _feeCollector;\n\n        protocolFee = 500;\n    }\n\n    modifier onlyBribeManager() {\n        require(msg.sender == bribeManager, \"Only BribeManager\");\n        _;\n    }\n\n    modifier harvest() {\n        // handle bribes reward\n        (\n            address[][] memory rewardTokensList,\n            uint256[][] memory earnedRewards\n        ) = IBribeManager(bribeManager).getRewardAll();\n        uint256 quoAmount = 0;\n        for (uint256 i = 0; i < rewardTokensList.length; i++) {\n            for (uint256 j = 0; j < rewardTokensList[i].length; j++) {\n                address rewardToken = rewardTokensList[i][j];\n                uint256 earnedReward = earnedRewards[i][j];\n                if (rewardToken == address(0) || earnedReward == 0) {\n                    continue;\n                }\n                if (rewardToken == quo) {\n                    quoAmount = quoAmount.add(earnedReward);\n                    continue;\n                }\n                if (AddressLib.isPlatformToken(rewardToken)) {\n                    quoAmount = quoAmount.add(\n                        nativeZapper.swapToken{value: earnedReward}(\n                            rewardToken,\n                            quo,\n                            earnedReward,\n                            address(this)\n                        )\n                    );\n                } else {\n                    _approveTokenIfNeeded(\n                        rewardToken,\n                        address(nativeZapper),\n                        earnedReward\n                    );\n                    quoAmount = quoAmount.add(\n                        nativeZapper.swapToken(\n                            rewardToken,\n                            quo,\n                            earnedReward,\n                            address(this)\n                        )\n                    );\n                }\n            }\n        }\n        if (quoAmount > 0) {\n            uint256 fee;\n            if (protocolFee > 0 && feeCollector != address(0)) {\n                fee = protocolFee.mul(quoAmount).div(DENOMINATOR);\n                quo.safeTransferToken(feeCollector, fee);\n            }\n            emit QuoHarvested(quoAmount, fee);\n            quoAmount = quoAmount.sub(fee);\n            _approveTokenIfNeeded(quo, address(rewardPool), quoAmount);\n            rewardPool.queueNewRewards(quo, quoAmount);\n        }\n        _;\n    }\n\n    function setProtocolFee(uint256 _protocolFee) external onlyOwner {\n        require(_protocolFee < DENOMINATOR, \"invalid _protocolFee!\");\n        protocolFee = _protocolFee;\n    }\n\n    function setFeeCollector(address _feeCollector) external onlyOwner {\n        require(_feeCollector != address(0), \"invalid _feeCollector!\");\n        feeCollector = _feeCollector;\n    }\n\n    function updateWeight(address _lp, uint256 _weight) external onlyManager {\n        require(_lp != address(this), \"??\");\n        if (!isVotePool[_lp]) {\n            require(\n                IBribeManager(bribeManager).isPoolActive(_lp),\n                \"Pool not active\"\n            );\n            isVotePool[_lp] = true;\n            votePools.push(_lp);\n        }\n        totalWeight = totalWeight.sub(votingWeights[_lp]).add(_weight);\n        votingWeights[_lp] = _weight;\n    }\n\n    function deletePool(address _lp) external onlyOwner {\n        require(isVotePool[_lp], \"invalid _lp!\");\n        require(\n            !IBribeManager(bribeManager).isPoolActive(_lp),\n            \"Pool still active\"\n        );\n\n        isVotePool[_lp] = false;\n        uint256 length = votePools.length;\n        address[] memory newVotePool = new address[](length - 1);\n        uint256 indexShift;\n        for (uint256 i; i < length; i++) {\n            if (votePools[i] == _lp) {\n                indexShift = 1;\n            } else {\n                newVotePool[i - indexShift] = votePools[i];\n            }\n        }\n        votePools = newVotePool;\n        totalWeight = totalWeight - votingWeights[_lp];\n        votingWeights[_lp] = 0;\n        if (_getVoteForLp(_lp) > 0) {\n            IBribeManager(bribeManager).unvote(_lp);\n        }\n        _updateVote();\n    }\n\n    function getPoolsLength() external view returns (uint256) {\n        return votePools.length;\n    }\n\n    function getRewardTokens() public view returns (address[] memory) {\n        return rewardPool.getRewardTokens();\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return rewardPool.totalSupply();\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return rewardPool.balanceOf(account);\n    }\n\n    function earned(address _account, address _rewardToken)\n        external\n        view\n        returns (uint256)\n    {\n        return rewardPool.earned(_account, _rewardToken);\n    }\n\n    function harvestManually() external harvest {\n        return;\n    }\n\n    function stakeFor(address _for, uint256 _amount)\n        external\n        onlyBribeManager\n        harvest\n    {\n        rewardPool.stakeFor(_for, _amount);\n        _updateVote();\n    }\n\n    function withdrawFor(address _for, uint256 _amount)\n        external\n        onlyBribeManager\n        harvest\n    {\n        rewardPool.withdrawFor(_for, _amount);\n        _updateVote();\n    }\n\n    function getReward(address _for)\n        external\n        onlyBribeManager\n        returns (\n            address[] memory rewardTokensList,\n            uint256[] memory earnedRewards\n        )\n    {\n        rewardTokensList = getRewardTokens();\n        uint256 length = rewardTokensList.length;\n        earnedRewards = new uint256[](length);\n        for (uint256 index = 0; index < length; ++index) {\n            address rewardToken = rewardTokensList[index];\n            earnedRewards[index] = rewardPool.earned(_for, rewardToken);\n        }\n        rewardPool.getReward(_for);\n    }\n\n    function _getVoteForLp(address _lp) internal view returns (uint256) {\n        return\n            IBribeManager(bribeManager).getUserVoteForPool(_lp, address(this));\n    }\n\n    function _updateVote() internal {\n        uint256 length = votePools.length;\n        int256[] memory deltas = new int256[](length);\n        for (uint256 index = 0; index < length; ++index) {\n            address pool = votePools[index];\n            uint256 targetVote = votingWeights[pool].mul(totalSupply()).div(\n                totalWeight\n            );\n            uint256 currentVote = _getVoteForLp(pool);\n            deltas[index] = int256(targetVote) - int256(currentVote);\n        }\n        IBribeManager(bribeManager).vote(votePools, deltas);\n    }\n\n    function _approveTokenIfNeeded(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (IERC20(_token).allowance(address(this), _to) < _amount) {\n            IERC20(_token).safeApprove(_to, 0);\n            IERC20(_token).safeApprove(_to, type(uint256).max);\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/DepositToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\nimport \"./Interfaces/IDepositToken.sol\";\n\ncontract DepositToken is IDepositToken, ERC20Upgradeable, OwnableUpgradeable {\n    address public operator;\n\n    function initialize(address _operator, address _lptoken)\n        public\n        initializer\n    {\n        require(_operator != address(0), \"invalid _operator!\");\n\n        __Ownable_init();\n\n        __ERC20_init_unchained(\n            string(abi.encodePacked(ERC20(_lptoken).name(), \" Quoll Deposit\")),\n            string(abi.encodePacked(\"quo\", ERC20(_lptoken).symbol()))\n        );\n\n        operator = _operator;\n    }\n\n    function mint(address _to, uint256 _amount) external override {\n        require(msg.sender == operator, \"!authorized\");\n\n        _mint(_to, _amount);\n    }\n\n    function burn(address _from, uint256 _amount) external override {\n        require(msg.sender == operator, \"!authorized\");\n\n        _burn(_from, _amount);\n    }\n}\n"
    },
    "contracts/Interfaces/IBaseRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"./IRewards.sol\";\n\ninterface IBaseRewardPool is IRewards {\n    function setParams(\n        address _booster,\n        uint256 _pid,\n        address _stakingToken,\n        address _rewardToken\n    ) external;\n\n    function getReward(address) external;\n\n    function withdrawFor(address _account, uint256 _amount) external;\n\n    event BoosterUpdated(address _booster);\n    event OperatorUpdated(address _operator);\n    event Granted(address _address, bool _grant);\n}\n"
    },
    "contracts/Interfaces/IBribeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface IBribeManager {\n    function isPoolActive(address pool) external view returns (bool);\n\n    function getUserTotalVote(address _user) external view returns (uint256);\n\n    function getUserVoteForPool(address _lp, address _user)\n        external\n        view\n        returns (uint256);\n\n    function getUserVoteForPools(address[] calldata _lps, address _user)\n        external\n        view\n        returns (uint256[] memory votes);\n\n    function vote(address[] calldata _lps, int256[] calldata _deltas) external;\n\n    function unvote(address _lp) external;\n\n    function getRewardAll()\n        external\n        returns (\n            address[][] memory rewardTokens,\n            uint256[][] memory earnedRewards\n        );\n\n    event PoolAdded(address indexed _lp, address indexed _rewarder);\n\n    event AllVoteReset();\n\n    event VoteUpdated(\n        address indexed _user,\n        address indexed _lp,\n        uint256 _amount\n    );\n}\n"
    },
    "contracts/Interfaces/IDelegateVotePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IDelegateVotePool {\n    function getReward(address _for)\n        external\n        returns (\n            address[] memory rewardTokensList,\n            uint256[] memory earnedRewards\n        );\n}\n"
    },
    "contracts/Interfaces/IDepositToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IDepositToken {\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n}\n"
    },
    "contracts/Interfaces/ILpLocker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface ILpLocker {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address _user) external view returns (uint256);\n\n    function lock(\n        address _user,\n        uint256 _amount,\n        uint256 _weeks\n    ) external;\n\n    function unlock(uint256 _slot) external;\n\n    event Locked(address indexed _user, uint256 _amount, uint256 _weeks);\n\n    event Unlocked(\n        address indexed _user,\n        uint256 _unlockTime,\n        uint256 _amount,\n        uint256 _vlQuoAmount\n    );\n\n    event RewardAdded(uint256 _reward);\n\n    event RewardPaid(address indexed _user, uint256 _reward);\n}\n"
    },
    "contracts/Interfaces/INativeZapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface INativeZapper {\n    enum Dex {\n        PCS,\n        Thena\n    }\n\n    function getAmountOut(address _from, uint256 _amount)\n        external\n        view\n        returns (uint256);\n\n    function zapInToken(\n        address _from,\n        uint256 _amount,\n        address _receiver\n    ) external returns (uint256 nativeAmount);\n\n    function swapToken(\n        address _from,\n        address _to,\n        uint256 _amount,\n        address _receiver\n    ) external payable returns (uint256);\n\n    event ZapIn(\n        Dex _dex,\n        address indexed _from,\n        uint256 _amount,\n        address indexed _receiver,\n        uint256 _amountOut\n    );\n    event Swapped(\n        address indexed _from,\n        address indexed _to,\n        uint256 _amount,\n        address indexed _receiver,\n        uint256 _amountOut\n    );\n    event AccessSet(address indexed _address, bool _status);\n    event PairToDexSet(address indexed _from, address indexed _to, Dex _dex);\n}\n"
    },
    "contracts/Interfaces/IPancakePath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IPancakePath {\n    function setPath(\n        address _from,\n        address _to,\n        address[] calldata _path\n    ) external;\n\n    function getPath(address _from, address _to)\n        external\n        view\n        returns (address[] memory);\n}\n"
    },
    "contracts/Interfaces/IQuollExternalToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface IQuollExternalToken is IERC20Upgradeable {\n    function mint(address, uint256) external;\n\n    function burn(address, uint256) external;\n}\n"
    },
    "contracts/Interfaces/IQuollMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IRewarder.sol\";\n\ninterface IQuollMasterChef {\n    function poolInfo(uint256)\n        external\n        view\n        returns (\n            IERC20,\n            uint256,\n            uint256,\n            uint256,\n            IRewarder\n        );\n\n    function userInfo(uint256 _pid, address _account)\n        external\n        view\n        returns (uint256, uint256);\n\n    function claim(uint256 _pid, address _account) external;\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n}\n"
    },
    "contracts/Interfaces/IQuollToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IQuollToken {\n    function mint(address _to, uint256 _amount) external;\n}\n"
    },
    "contracts/Interfaces/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IRewarder {\n    function onReward(\n        uint256 pid,\n        address user,\n        address recipient,\n        uint256,\n        uint256 newLpAmount\n    ) external;\n\n    function pendingTokens(\n        uint256 pid,\n        address user,\n        uint256\n    ) external view returns (IERC20[] memory, uint256[] memory);\n}\n"
    },
    "contracts/Interfaces/IRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IRewards {\n    function stakingToken() external view returns (IERC20);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function stake(uint256) external;\n\n    function stakeAll() external;\n\n    function stakeFor(address, uint256) external;\n\n    function withdraw(uint256) external;\n\n    function withdrawAll() external;\n\n    function donate(address, uint256) external payable;\n\n    function queueNewRewards(address, uint256) external payable;\n\n    function earned(address, address) external view returns (uint256);\n\n    function getUserAmountTime(address) external view returns (uint256);\n\n    function getRewardTokens() external view returns (address[] memory);\n\n    function getRewardTokensLength() external view returns (uint256);\n\n    function setAccess(address _address, bool _status) external;\n\n    event RewardTokenAdded(address indexed _rewardToken);\n    event RewardAdded(address indexed _rewardToken, uint256 _reward);\n    event Staked(address indexed _user, uint256 _amount);\n    event Withdrawn(address indexed _user, uint256 _amount);\n    event RewardPaid(\n        address indexed _user,\n        address indexed _rewardToken,\n        uint256 _reward\n    );\n    event AccessSet(address indexed _address, bool _status);\n}\n"
    },
    "contracts/Interfaces/ISmartConvertor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface ISmartConvertor {\n    function deposit(uint256 _amount) external returns (uint256 obtainedAmount);\n\n    function depositFor(uint256 _amount, address _for)\n        external\n        returns (uint256 obtainedAmount);\n}\n"
    },
    "contracts/Interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IStrategy {\n    function vault() external view returns (address);\n    function want() external view returns (IERC20);\n    function beforeDeposit() external;\n    function deposit() external;\n    function withdraw(uint256) external;\n    function balanceOf() external view returns (uint256);\n    function balanceOfWant() external view returns (uint256);\n    function balanceOfPool() external view returns (uint256);\n    function harvest() external;\n    function retireStrat() external;\n}"
    },
    "contracts/Interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IVault {\n    // --- Events ---\n    event WantUpdated(address _want);\n    event StrategyUpdated(address _strategy);\n    event StrategyProposed(address _strategy);\n    event Deposited(address indexed _user, uint256 _amount);\n    event Withdrawn(address indexed _user, uint256 _shares);\n\n    // --- Functions ---\n    function want() external view returns (IERC20);\n\n    function balance() external view returns (uint256);\n\n    function available() external view returns (uint256);\n\n    function getPricePerFullShare() external view returns (uint256);\n\n    function depositAll() external returns (uint256);\n\n    function deposit(uint256 _amount) external returns (uint256);\n\n    function earn() external;\n\n    function withdrawAll() external returns (uint256);\n\n    function withdraw(uint256 _shares) external returns (uint256);\n\n    function proposeStrat(address _implementation) external;\n\n    function upgradeStrat() external;\n\n    function inCaseTokensGetStuck(address _token) external;\n}\n"
    },
    "contracts/Interfaces/IVirtualBalanceRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"./IRewards.sol\";\n\ninterface IVirtualBalanceRewardPool {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function stakeFor(address _for, uint256 _amount) external;\n\n    function withdrawFor(address _account, uint256 _amount) external;\n\n    function getReward(address _account) external;\n\n    function donate(address, uint256) external payable;\n\n    function queueNewRewards(address, uint256) external payable;\n\n    function earned(address, address) external view returns (uint256);\n\n    function getUserAmountTime(address) external view returns (uint256);\n\n    function getRewardTokens() external view returns (address[] memory);\n\n    function getRewardTokensLength() external view returns (uint256);\n\n    function setAccess(address _address, bool _status) external;\n\n    event OperatorUpdated(address _operator);\n\n    event RewardTokenAdded(address indexed _rewardToken);\n    event RewardAdded(address indexed _rewardToken, uint256 _reward);\n    event Staked(address indexed _user, uint256 _amount);\n    event Withdrawn(address indexed _user, uint256 _amount);\n    event RewardPaid(\n        address indexed _user,\n        address indexed _rewardToken,\n        uint256 _reward\n    );\n    event AccessSet(address indexed _address, bool _status);\n}\n"
    },
    "contracts/Interfaces/IVlQuoV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IVlQuoV2 {\n    function quo() external view returns (IERC20);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address _user) external view returns (uint256);\n\n    function blockThirdPartyActions(address _user) external view returns (bool);\n\n    function unlockGracePeriod() external view returns (uint256);\n\n    function unlockPunishment() external view returns (uint256);\n\n    function lock(\n        address _user,\n        uint256 _amount,\n        uint256 _weeks\n    ) external;\n\n    function increaseBalance(address _user, uint256 _amount) external;\n\n    function decreaseBalance(address _user, uint256 _amount) external;\n\n    event Locked(address indexed _user, uint256 _amount, uint256 _weeks);\n\n    event Unlocked(\n        address indexed _user,\n        uint256 _unlockTime,\n        uint256 _quoAmount,\n        uint256 _vlQuoAmount\n    );\n\n    event RewardTokenAdded(address indexed _rewardToken);\n\n    event RewardAdded(address indexed _rewardToken, uint256 _reward);\n\n    event RewardPaid(\n        address indexed _user,\n        address indexed _rewardToken,\n        uint256 _reward\n    );\n\n    event AccessSet(address indexed _address, bool _status);\n\n    event AllowedLockerSet(address indexed _locker, bool _allowed);\n\n    event BalanceUpdated(address indexed _user, uint256 _balance);\n}\n"
    },
    "contracts/Interfaces/IWombatBooster.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\ninterface IWombatBooster {\n    function poolLength() external view returns (uint256);\n\n    function poolInfo(uint256)\n        external\n        view\n        returns (\n            address,\n            address,\n            uint256,\n            address,\n            bool\n        );\n\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        bool _stake\n    ) external;\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function rewardClaimed(\n        uint256,\n        address,\n        address,\n        uint256\n    ) external;\n\n    event Deposited(\n        address indexed _user,\n        uint256 indexed _poolid,\n        uint256 _amount\n    );\n    event Withdrawn(\n        address indexed _user,\n        uint256 indexed _poolid,\n        uint256 _amount\n    );\n    event WomClaimed(uint256 _pid, uint256 _amount);\n    event EarmarkIncentiveSent(\n        uint256 _pid,\n        address indexed _caller,\n        uint256 _amount\n    );\n\n    event Migrated(uint256 _pid, address indexed _newMasterWombat);\n\n    event VlQuoAddressChanged(address _vlQuo);\n}\n"
    },
    "contracts/Interfaces/IWombatVoterProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface IWombatVoterProxy {\n    function getLpToken(uint256) external view returns (address);\n\n    function getLpTokenV2(address, uint256) external view returns (address);\n\n    function getBonusTokens(uint256) external view returns (address[] memory);\n\n    function getBonusTokensV2(address, uint256)\n        external\n        view\n        returns (address[] memory);\n\n    function deposit(uint256, uint256)\n        external\n        returns (address[] memory, uint256[] memory);\n\n    function depositV2(\n        address,\n        uint256,\n        uint256\n    ) external returns (address[] memory, uint256[] memory);\n\n    function withdraw(uint256, uint256)\n        external\n        returns (address[] memory, uint256[] memory);\n\n    function withdrawV2(\n        address,\n        uint256,\n        uint256\n    ) external returns (address[] memory, uint256[] memory);\n\n    function withdrawAll(uint256)\n        external\n        returns (address[] memory, uint256[] memory);\n\n    function withdrawAllV2(address, uint256)\n        external\n        returns (address[] memory, uint256[] memory);\n\n    function claimRewards(uint256)\n        external\n        returns (address[] memory, uint256[] memory);\n\n    function claimRewardsV2(address, uint256)\n        external\n        returns (address[] memory, uint256[] memory);\n\n    function balanceOfPool(uint256) external view returns (uint256);\n\n    function balanceOfPoolV2(address, uint256) external view returns (uint256);\n\n    function migrate(\n        uint256,\n        address,\n        address\n    )\n        external\n        returns (\n            uint256,\n            address[] memory,\n            uint256[] memory\n        );\n\n    function lockWom(uint256) external;\n\n    function vote(\n        address[] calldata _lpVote,\n        int256[] calldata _deltas,\n        address[] calldata _rewarders,\n        address _caller\n    )\n        external\n        returns (\n            address[][] memory rewardTokens,\n            uint256[][] memory feeAmounts\n        );\n\n    function pendingBribeCallerFee(address[] calldata _pendingPools)\n        external\n        view\n        returns (\n            address[][] memory rewardTokens,\n            uint256[][] memory callerFeeAmount\n        );\n\n    // --- Events ---\n    event BoosterUpdated(address _booster);\n    event DepositorUpdated(address _depositor);\n\n    event Deposited(uint256 _pid, uint256 _amount);\n    event DepositedV2(address _masterWombat, uint256 _pid, uint256 _amount);\n\n    event Withdrawn(uint256 _pid, uint256 _amount);\n    event WithdrawnV2(address _masterWombat, uint256 _pid, uint256 _amount);\n\n    event RewardsClaimed(uint256 _pid, uint256 _amount);\n    event RewardsClaimedV2(\n        address _masterWombat,\n        uint256 _pid,\n        uint256 _amount\n    );\n\n    event BonusRewardsClaimed(\n        uint256 _pid,\n        address _bonusTokenAddress,\n        uint256 _bonusTokenAmount\n    );\n\n    event BonusRewardsClaimedV2(\n        address _masterWombat,\n        uint256 _pid,\n        address _bonusTokenAddress,\n        uint256 _bonusTokenAmount\n    );\n\n    event WomLocked(uint256 _amount, uint256 _lockDays);\n    event WomUnlocked(uint256 _slot);\n\n    event Voted(\n        address[] _lpVote,\n        int256[] _deltas,\n        address[] _rewarders,\n        address _caller\n    );\n}\n"
    },
    "contracts/Interfaces/IWomDepositor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IWomDepositor {\n    function deposit(uint256, bool) external;\n\n    event Deposited(address indexed _user, uint256 _amount);\n}\n"
    },
    "contracts/Interfaces/Kalmy/IKalmyLpWar.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IKalmyLpWar {\n    function Kalm() external returns (address);\n\n    function poolInfo(uint256)\n        external\n        view\n        returns (\n            address want, // Address of the want token.\n            uint256 allocPoint, // How many allocation points assigned to this pool. Kalm to distribute per block.\n            uint256 lastRewardTime, // Last reward time that Kalm distribution occurs.\n            uint256 accKalmPerShare, // Accumulated Kalm per share, times 1e12. See below.\n            address strat // Strategy address that will Kalm compound want tokens\n        );\n\n    function deposit(uint256 _pid, uint256 _wantAmt) external;\n\n    function withdraw(uint256 _pid, uint256 _wantAmt) external;\n}\n"
    },
    "contracts/Interfaces/Pancake/IPancakePair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IPancakePair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/Interfaces/Pancake/IPancakeRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IPancakeRouter01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\ninterface IPancakeRouter02 is IPancakeRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/Interfaces/Thena/IThenaRouterV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface IThenaRouterV2 {\n    struct route {\n        address from;\n        address to;\n        bool stable;\n    }\n\n    function getAmountsOut(uint256 amountIn, route[] memory routes)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/Interfaces/Wombat/IAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IAsset is IERC20 {\n    function underlyingToken() external view returns (address);\n\n    function pool() external view returns (address);\n\n    function cash() external view returns (uint120);\n\n    function liability() external view returns (uint120);\n\n    function decimals() external view returns (uint8);\n\n    function underlyingTokenDecimals() external view returns (uint8);\n\n    function setPool(address pool_) external;\n\n    function underlyingTokenBalance() external view returns (uint256);\n\n    function transferUnderlyingToken(address to, uint256 amount) external;\n\n    function mint(address to, uint256 amount) external;\n\n    function burn(address to, uint256 amount) external;\n\n    function addCash(uint256 amount) external;\n\n    function removeCash(uint256 amount) external;\n\n    function addLiability(uint256 amount) external;\n\n    function removeLiability(uint256 amount) external;\n}\n"
    },
    "contracts/Interfaces/Wombat/IBribe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IBribe {\n    function onVote(\n        address user,\n        uint256 newVote,\n        uint256 originalTotalVotes\n    ) external returns (uint256[] memory rewards);\n\n    function pendingTokens(address _user)\n        external\n        view\n        returns (uint256[] memory rewards);\n\n    function rewardTokens() external view returns (address[] memory tokens);\n\n    function rewardLength() external view returns (uint256);\n}\n"
    },
    "contracts/Interfaces/Wombat/IMasterWombatV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface IMasterWombatV2 {\n    function poolInfo(uint256)\n        external\n        view\n        returns (\n            // storage slot 1\n            address lpToken, // Address of LP token contract.\n            uint96 allocPoint, // How many allocation points assigned to this pool. WOMs to distribute per second.\n            // storage slot 2\n            address rewarder,\n            // storage slot 3\n            uint256 sumOfFactors, // the sum of all boosted factors by all of the users in the pool\n            // storage slot 4\n            uint104 accWomPerShare, // 19.12 fixed point. Accumulated WOMs per share, times 1e12.\n            uint104 accWomPerFactorShare, // 19.12 fixed point.accumulated wom per factor share\n            uint40 lastRewardTimestamp // Last timestamp that WOMs distribution occurs.\n        );\n\n    function userInfo(uint256, address)\n        external\n        view\n        returns (\n            // storage slot 1\n            uint128 amount, // 20.18 fixed point. How many LP tokens the user has provided.\n            uint128 factor, // 20.18 fixed point. boosted factor = sqrt (lpAmount * veWom.balanceOf())\n            // storage slot 2\n            uint128 rewardDebt, // 20.18 fixed point. Reward debt. See explanation below.\n            uint128 pendingWom // 20.18 fixed point. Amount of pending wom\n            //\n            // We do some fancy math here. Basically, any point in time, the amount of WOMs\n            // entitled to a user but is pending to be distributed is:\n            //\n            //   ((user.amount * pool.accWomPerShare + user.factor * pool.accWomPerFactorShare) / 1e12) -\n            //        user.rewardDebt\n            //\n            // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n            //   1. The pool's `accWomPerShare`, `accWomPerFactorShare` (and `lastRewardTimestamp`) gets updated.\n            //   2. User receives the pending reward sent to his/her address.\n            //   3. User's `amount` gets updated.\n            //   4. User's `rewardDebt` gets updated.\n        );\n\n    function wom() external view returns (address);\n\n    function veWom() external view returns (address);\n\n    function getAssetPid(address asset) external view returns (uint256 pid);\n\n    function poolLength() external view returns (uint256);\n\n    function pendingTokens(uint256 _pid, address _user)\n        external\n        view\n        returns (\n            uint256 pendingRewards,\n            address[] memory bonusTokenAddress,\n            string[] memory bonusTokenSymbol,\n            uint256[] memory pendingBonusRewards\n        );\n\n    function rewarderBonusTokenInfo(uint256 _pid)\n        external\n        view\n        returns (\n            address[] memory bonusTokenAddresses,\n            string[] memory bonusTokenSymbols\n        );\n\n    function massUpdatePools() external;\n\n    function updatePool(uint256 _pid) external;\n\n    function deposit(uint256 _pid, uint256 _amount)\n        external\n        returns (uint256, uint256[] memory);\n\n    function multiClaim(uint256[] memory _pids)\n        external\n        returns (\n            uint256 transfered,\n            uint256[] memory rewards,\n            uint256[][] memory additionalRewards\n        );\n\n    function withdraw(uint256 _pid, uint256 _amount)\n        external\n        returns (uint256, uint256[] memory);\n\n    function emergencyWithdraw(uint256 _pid) external;\n\n    function migrate(uint256[] calldata _pids) external;\n\n    function depositFor(\n        uint256 _pid,\n        uint256 _amount,\n        address _user\n    ) external;\n\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\n}\n"
    },
    "contracts/Interfaces/Wombat/IMasterWombatV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface IMasterWombatV3 {\n    function poolInfoV3(uint256)\n        external\n        view\n        returns (\n            address lpToken, // Address of LP token contract.\n            address rewarder,\n            uint40 periodFinish,\n            uint128 sumOfFactors, // 20.18 fixed point. the sum of all boosted factors by all of the users in the pool\n            uint128 rewardRate, // 20.18 fixed point.\n            uint104 accWomPerShare, // 19.12 fixed point. Accumulated WOM per share, times 1e12.\n            uint104 accWomPerFactorShare, // 19.12 fixed point. Accumulated WOM per factor share\n            uint40 lastRewardTimestamp\n        );\n\n    function userInfo(uint256, address)\n        external\n        view\n        returns (\n            // storage slot 1\n            uint128 amount, // 20.18 fixed point. How many LP tokens the user has provided.\n            uint128 factor, // 20.18 fixed point. boosted factor = sqrt (lpAmount * veWom.balanceOf())\n            // storage slot 2\n            uint128 rewardDebt, // 20.18 fixed point. Reward debt. See explanation below.\n            uint128 pendingWom // 20.18 fixed point. Amount of pending wom\n            //\n            // We do some fancy math here. Basically, any point in time, the amount of WOMs\n            // entitled to a user but is pending to be distributed is:\n            //\n            //   ((user.amount * pool.accWomPerShare + user.factor * pool.accWomPerFactorShare) / 1e12) -\n            //        user.rewardDebt\n            //\n            // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n            //   1. The pool's `accWomPerShare`, `accWomPerFactorShare` (and `lastRewardTimestamp`) gets updated.\n            //   2. User receives the pending reward sent to his/her address.\n            //   3. User's `amount` gets updated.\n            //   4. User's `rewardDebt` gets updated.\n        );\n\n    function getAssetPid(address asset) external view returns (uint256 pid);\n\n    function poolLength() external view returns (uint256);\n\n    function pendingTokens(uint256 _pid, address _user)\n        external\n        view\n        returns (\n            uint256 pendingRewards,\n            address[] memory bonusTokenAddresses,\n            string[] memory bonusTokenSymbols,\n            uint256[] memory pendingBonusRewards\n        );\n\n    function rewarderBonusTokenInfo(uint256 _pid)\n        external\n        view\n        returns (\n            address[] memory bonusTokenAddresses,\n            string[] memory bonusTokenSymbols\n        );\n\n    function massUpdatePools() external;\n\n    function updatePool(uint256 _pid) external;\n\n    function deposit(uint256 _pid, uint256 _amount)\n        external\n        returns (uint256, uint256[] memory);\n\n    function multiClaim(uint256[] memory _pids)\n        external\n        returns (\n            uint256 transfered,\n            uint256[] memory rewards,\n            uint256[][] memory additionalRewards\n        );\n\n    function withdraw(uint256 _pid, uint256 _amount)\n        external\n        returns (uint256, uint256[] memory);\n\n    function emergencyWithdraw(uint256 _pid) external;\n\n    function migrate(uint256[] calldata _pids) external;\n\n    function depositFor(\n        uint256 _pid,\n        uint256 _amount,\n        address _user\n    ) external;\n\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\n\n    function notifyRewardAmount(address _lpToken, uint256 _amount) external;\n}\n"
    },
    "contracts/Interfaces/Wombat/IPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IPool {\n    function addressOfAsset(address token)\n        external\n        view\n        returns (address);\n\n    function deposit(\n        address token,\n        uint256 amount,\n        uint256 minimumLiquidity,\n        address to,\n        uint256 deadline,\n        bool shouldStake\n    ) external returns (uint256 liquidity);\n\n    function withdraw(\n        address token,\n        uint256 liquidity,\n        uint256 minimumAmount,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amount);\n}\n"
    },
    "contracts/Interfaces/Wombat/IVeWom.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Interface of the VeWom\n */\ninterface IVeWom {\n    struct Breeding {\n        uint48 unlockTime;\n        uint104 womAmount;\n        uint104 veWomAmount;\n    }\n\n    struct UserInfo {\n        // reserve usage for future upgrades\n        uint256[10] reserved;\n        Breeding[] breedings;\n    }\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address _addr) external view returns (uint256);\n\n    function isUser(address _addr) external view returns (bool);\n\n    function mint(uint256 amount, uint256 lockDays)\n        external\n        returns (uint256 veWomAmount);\n\n    function burn(uint256 slot) external;\n\n    function usedVote(address) external view returns (uint256);\n}\n"
    },
    "contracts/Interfaces/Wombat/IVoter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface IVoter {\n    function veWom() external view returns (address);\n\n    function lpTokens(uint256) external view returns (address);\n\n    function infos(address)\n        external\n        view\n        returns (\n            uint104 supplyBaseIndex, // 19.12 fixed point. distributed reward per alloc point\n            uint104 supplyVoteIndex, // 19.12 fixed point. distributed reward per vote weight\n            uint40 nextEpochStartTime,\n            uint128 claimable, // 20.18 fixed point. Rewards pending distribution in the next epoch\n            bool whitelist,\n            address gaugeManager,\n            address bribe // address of bribe\n        );\n\n    function lpTokenLength() external view returns (uint256);\n\n    function getUserVotes(address _user, address _lpToken)\n        external\n        view\n        returns (uint256);\n\n    function vote(address[] calldata _lpVote, int256[] calldata _deltas)\n        external\n        returns (uint256[][] memory bribeRewards);\n\n    function pendingBribes(address[] calldata _lpTokens, address _user)\n        external\n        view\n        returns (\n            address[][] memory bribeTokenAddresses,\n            string[][] memory bribeTokenSymbols,\n            uint256[][] memory bribeRewards\n        );\n\n    function distribute(address _lpToken) external;\n}\n"
    },
    "contracts/Interfaces/Wombat/IWombatRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IWombatRouter {\n    function getAmountIn(\n        address[] calldata tokenPath,\n        address[] calldata poolPath,\n        uint256 amountOut\n    ) external view returns (uint256 amountIn, uint256[] memory haircuts);\n\n    function getAmountOut(\n        address[] calldata tokenPath,\n        address[] calldata poolPath,\n        int256 amountIn\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\n\n    function swapExactTokensForTokens(\n        address[] calldata tokenPath,\n        address[] calldata poolPath,\n        uint256 amountIn,\n        uint256 minimumamountOut,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountOut);\n}\n"
    },
    "contracts/lib/AddressLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nlibrary AddressLib {\n    address public constant PLATFORM_TOKEN_ADDRESS =\n        0xeFEfeFEfeFeFEFEFEfefeFeFefEfEfEfeFEFEFEf;\n\n    function isPlatformToken(address addr) internal pure returns (bool) {\n        return addr == PLATFORM_TOKEN_ADDRESS;\n    }\n}"
    },
    "contracts/lib/Interfaces/IWNative.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\ninterface IWNative {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}"
    },
    "contracts/lib/Interfaces/IWNativeRelayer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\ninterface IWNativeRelayer {\n    function withdraw(address _wNative, uint256 _amount) external;\n}"
    },
    "contracts/lib/ManagerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nabstract contract ManagerUpgradeable is OwnableUpgradeable {\n    address public keeper;\n\n    event KeeperUpdated(address _keeper);\n\n    function __ManagerUpgradeable_init() internal initializer {\n        __Ownable_init_unchained();\n\n        __ManagerUpgradeable_init_unchained();\n    }\n\n    function __ManagerUpgradeable_init_unchained() internal initializer {}\n\n    // checks that caller is either owner or keeper.\n    modifier onlyManager() {\n        require(msg.sender == owner() || msg.sender == keeper, \"!manager\");\n        _;\n    }\n\n    function isManager(address _user) internal view returns (bool) {\n        return _user == owner() || _user == keeper;\n    }\n\n    /**\n     * @dev Updates keeper address.\n     * @param _keeper new keeper address.\n     */\n    function setKeeper(address _keeper) public onlyOwner {\n        keeper = _keeper;\n\n        emit KeeperUpdated(_keeper);\n    }\n}"
    },
    "contracts/lib/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./AddressLib.sol\";\n\nlibrary TransferHelper {\n\n    using AddressLib for address;\n\n    function safeTransferToken(\n        address token,\n        address to,\n        uint value\n    ) internal {\n        if (token.isPlatformToken()) {\n            safeTransferETH(to, value);\n        } else {\n            safeTransfer(IERC20(token), to, value);\n        }\n    }\n\n    function safeTransferETH(\n        address to,\n        uint value\n    ) internal {\n        (bool success, ) = address(to).call{value: value}(\"\");\n        require(success, \"TransferHelper: Sending ETH failed\");\n    }\n\n    function balanceOf(address token, address addr) internal view returns (uint) {\n        if (token.isPlatformToken()) {\n            return addr.balance;\n        } else {\n            return IERC20(token).balanceOf(addr);\n        }\n    }\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)'))) -> 0xa9059cbb\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)'))) -> 0x23b872dd\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransferFrom: transfer failed'\n        );\n    }\n}"
    },
    "contracts/LpLocker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\n\nimport \"./lib/ManagerUpgradeable.sol\";\nimport \"./Interfaces/Pancake/IPancakePair.sol\";\nimport \"./Interfaces/Kalmy/IKalmyLpWar.sol\";\nimport \"./Interfaces/IVlQuoV2.sol\";\nimport \"./Interfaces/ILpLocker.sol\";\n\ncontract LpLocker is\n    ILpLocker,\n    ManagerUpgradeable,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable\n{\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address public token;\n\n    IVlQuoV2 public vlQuoV2;\n    IERC20 public quo;\n\n    IKalmyLpWar public kalmyLpWar;\n    address public kalm;\n    uint256 public pid;\n\n    uint256 public multiplier;\n\n    uint256 public constant WEEK = 86400 * 7;\n    uint256 public constant MAX_LOCK_WEEKS = 52;\n\n    uint256 public maxLockLength;\n\n    address public treasury;\n\n    uint256 public constant FEE_DENOMINATOR = 10000;\n\n    struct LockInfo {\n        uint256 amount;\n        uint256 vlQuoAmount;\n        uint256 lockTime;\n        uint256 unlockTime;\n    }\n\n    mapping(address => LockInfo[]) public userLocks;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    uint256 rewardPerTokenStored;\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n\n    function initialize() public initializer {\n        __ManagerUpgradeable_init();\n\n        __ReentrancyGuard_init_unchained();\n\n        __Pausable_init_unchained();\n    }\n\n    function setParams(\n        address _token,\n        address _vlquoV2,\n        address _kalmyLpWar,\n        uint256 _pid,\n        address _treasury\n    ) external onlyOwner {\n        require(address(token) == address(0), \"params have already been set\");\n\n        require(_token != address(0), \"invalid _token!\");\n        require(_vlquoV2 != address(0), \"invalid _vlquoV2!\");\n        require(_kalmyLpWar != address(0), \"invalid _kalmyLpWar!\");\n        require(_treasury != address(0), \"invalid _treasury!\");\n\n        (address want, , , , ) = IKalmyLpWar(_kalmyLpWar).poolInfo(_pid);\n        require(want == _token, \"invalid _token or _pid!\");\n\n        token = _token;\n        vlQuoV2 = IVlQuoV2(_vlquoV2);\n        quo = vlQuoV2.quo();\n        kalmyLpWar = IKalmyLpWar(_kalmyLpWar);\n        kalm = kalmyLpWar.Kalm();\n        pid = _pid;\n        treasury = _treasury;\n\n        maxLockLength = 10000;\n        multiplier = 10000;\n\n        IERC20(token).safeApprove(_kalmyLpWar, type(uint256).max);\n    }\n\n    modifier updateReward(address _user) {\n        _harvest();\n\n        rewards[_user] = earned(_user);\n        userRewardPerTokenPaid[_user] = rewardPerTokenStored;\n\n        _;\n    }\n\n    function setMultiplier(uint256 _multiplier) external onlyManager {\n        multiplier = _multiplier;\n    }\n\n    function pause() external onlyManager {\n        _pause();\n    }\n\n    function unpause() external onlyManager {\n        _unpause();\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _user) public view override returns (uint256) {\n        return _balances[_user];\n    }\n\n    function getUserLocks(address _user)\n        external\n        view\n        returns (LockInfo[] memory)\n    {\n        return userLocks[_user];\n    }\n\n    function lock(\n        address _user,\n        uint256 _amount,\n        uint256 _weeks\n    ) external override nonReentrant whenNotPaused updateReward(_user) {\n        require(_user != address(0), \"invalid _user!\");\n        require(\n            msg.sender == _user || !vlQuoV2.blockThirdPartyActions(_user),\n            \"Cannot lock on behalf of this account\"\n        );\n\n        require(_weeks > 0, \"Min 1 week\");\n        require(_weeks <= MAX_LOCK_WEEKS, \"Exceeds MAX_LOCK_WEEKS\");\n        require(_amount > 0, \"Amount must be nonzero\");\n\n        require(userLocks[_user].length < maxLockLength, \"locks too much\");\n\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint256 vlQuoAmount = _getVlQuoAmount(_amount, _weeks);\n        uint256 unlockTime = _getNextWeek().add(_weeks.mul(WEEK));\n        userLocks[_user].push(\n            LockInfo(_amount, vlQuoAmount, block.timestamp, unlockTime)\n        );\n\n        kalmyLpWar.deposit(pid, _amount);\n        _totalSupply = _totalSupply.add(_amount);\n        _balances[_user] = _balances[_user].add(_amount);\n\n        vlQuoV2.increaseBalance(_user, vlQuoAmount);\n\n        emit Locked(_user, _amount, _weeks);\n    }\n\n    function unlock(uint256 _slot)\n        external\n        override\n        nonReentrant\n        whenNotPaused\n        updateReward(msg.sender)\n    {\n        uint256 length = userLocks[msg.sender].length;\n        require(_slot < length, \"wut?\");\n\n        LockInfo memory lockInfo = userLocks[msg.sender][_slot];\n        require(lockInfo.unlockTime <= block.timestamp, \"not yet meh\");\n\n        _withdrawFromKalm(lockInfo.amount);\n\n        _totalSupply = _totalSupply.sub(lockInfo.amount);\n        _balances[msg.sender] = _balances[msg.sender].sub(lockInfo.amount);\n\n        uint256 punishment;\n        {\n            uint256 unlockGracePeriod = vlQuoV2.unlockGracePeriod();\n            if (block.timestamp > lockInfo.unlockTime.add(unlockGracePeriod)) {\n                punishment = block\n                    .timestamp\n                    .sub(lockInfo.unlockTime.add(unlockGracePeriod))\n                    .div(WEEK)\n                    .add(1)\n                    .mul(vlQuoV2.unlockPunishment())\n                    .mul(lockInfo.amount)\n                    .div(FEE_DENOMINATOR);\n                punishment = Math.min(punishment, lockInfo.amount);\n            }\n        }\n\n        // remove slot\n        if (_slot != length - 1) {\n            userLocks[msg.sender][_slot] = userLocks[msg.sender][length - 1];\n        }\n        userLocks[msg.sender].pop();\n\n        if (punishment > 0) {\n            _safeTransferToken(token, treasury, punishment);\n        }\n        _safeTransferToken(token, msg.sender, lockInfo.amount.sub(punishment));\n\n        vlQuoV2.decreaseBalance(msg.sender, lockInfo.vlQuoAmount);\n\n        emit Unlocked(\n            msg.sender,\n            lockInfo.unlockTime,\n            lockInfo.amount,\n            lockInfo.vlQuoAmount\n        );\n\n        _getReward(msg.sender);\n    }\n\n    function getReward()\n        public\n        nonReentrant\n        whenNotPaused\n        updateReward(msg.sender)\n    {\n        _getReward(msg.sender);\n    }\n\n    function earned(address _user) public view returns (uint256) {\n        return\n            balanceOf(_user)\n                .mul(rewardPerTokenStored.sub(userRewardPerTokenPaid[_user]))\n                .div(1e18)\n                .add(rewards[_user]);\n    }\n\n    function getVlQuoAmount(\n        uint256 _amount,\n        uint256 _weeks\n    ) external view returns (uint256) {\n        return _getVlQuoAmount(_amount, _weeks);\n    }\n\n    function emergencyWithdraw() external onlyOwner {\n        _harvest();\n        kalmyLpWar.withdraw(pid, type(uint256).max);\n    }\n\n    function _harvest() internal {\n        uint256 kalmBalBefore = IERC20(kalm).balanceOf(address(this));\n        kalmyLpWar.deposit(pid, 0);\n        uint256 kalmBalAfter = IERC20(kalm).balanceOf(address(this));\n        uint256 kalmAmount = kalmBalAfter.sub(kalmBalBefore);\n        if (kalmAmount == 0 || totalSupply() == 0) {\n            return;\n        }\n        rewardPerTokenStored = rewardPerTokenStored.add(\n            kalmAmount.mul(1e18).div(totalSupply())\n        );\n\n        emit RewardAdded(kalmAmount);\n    }\n\n    function _getReward(address _user) internal {\n        uint256 reward = rewards[_user];\n        if (reward == 0) {\n            return;\n        }\n\n        rewards[_user] = 0;\n        IERC20(kalm).transfer(_user, reward);\n        emit RewardPaid(_user, reward);\n    }\n\n    function _withdrawFromKalm(uint256 _amount) internal {\n        uint256 tokenBal = IERC20(token).balanceOf(address(this));\n        if (tokenBal < _amount) {\n            kalmyLpWar.withdraw(pid, _amount.sub(tokenBal));\n        }\n    }\n\n    function _safeTransferToken(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        uint256 tokenBal = IERC20(_token).balanceOf(address(this));\n        if (_amount > tokenBal) {\n            _amount = tokenBal;\n        }\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n\n    function _getVlQuoAmount(uint256 _amount, uint256 _weeks)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            _amount\n                .mul(quo.balanceOf(token))\n                .div(IPancakePair(token).totalSupply())\n                .mul(_weeks)\n                .mul(multiplier)\n                .div(FEE_DENOMINATOR);\n    }\n\n    function _getCurWeek() internal view returns (uint256) {\n        return block.timestamp.div(WEEK).mul(WEEK);\n    }\n\n    function _getNextWeek() internal view returns (uint256) {\n        return _getCurWeek().add(WEEK);\n    }\n}\n"
    },
    "contracts/NativeZapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./lib/TransferHelper.sol\";\nimport \"./Interfaces/INativeZapper.sol\";\nimport \"./Interfaces/IPancakePath.sol\";\nimport \"./Interfaces/Pancake/IPancakeRouter.sol\";\nimport \"./Interfaces/Thena/IThenaRouterV2.sol\";\n\ncontract NativeZapper is INativeZapper, OwnableUpgradeable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address public wNative;\n    IPancakeRouter02 public pancakeRouter;\n    IPancakePath public pancakePath;\n\n    mapping(address => bool) public access;\n\n    mapping(address => mapping(address => Dex)) public pairToDex;\n\n    IThenaRouterV2 public thenaRouter;\n    mapping(address => mapping(address => IThenaRouterV2.route[]))\n        public thenaRoutes;\n\n    function initialize() public initializer {\n        __Ownable_init();\n    }\n\n    function setParams(\n        address _wNative,\n        address _pancakeRouter,\n        address _pancakePath\n    ) external onlyOwner {\n        require(wNative == address(0), \"params have already been set\");\n\n        wNative = _wNative;\n        pancakeRouter = IPancakeRouter02(_pancakeRouter);\n        pancakePath = IPancakePath(_pancakePath);\n    }\n\n    function setThenaRouter(address _thenaRouter) external onlyOwner {\n        thenaRouter = IThenaRouterV2(_thenaRouter);\n    }\n\n    function setThenaRoutes(\n        address _from,\n        address _to,\n        address[] calldata _froms,\n        address[] calldata _tos,\n        bool[] calldata _stables\n    ) external onlyOwner {\n        require(\n            _froms.length == _tos.length && _froms.length == _stables.length,\n            \"invalid routes\"\n        );\n\n        delete thenaRoutes[_from][_to];\n        for (uint256 i = 0; i < _froms.length; i++) {\n            thenaRoutes[_from][_to].push(\n                IThenaRouterV2.route(_froms[i], _tos[i], _stables[i])\n            );\n        }\n    }\n\n    function setPairDex(\n        address _from,\n        address _to,\n        Dex _dex\n    ) external onlyOwner {\n        pairToDex[_from][_to] = _dex;\n        emit PairToDexSet(_from, _to, _dex);\n    }\n\n    function getAmountOut(address _from, uint256 _amount)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        Dex dex = pairToDex[_from][wNative];\n        if (dex == Dex.PCS) {\n            uint256[] memory amounts = pancakeRouter.getAmountsOut(\n                _amount,\n                _getPcsPath(_from, wNative)\n            );\n            return amounts[amounts.length - 1];\n        }\n        if (dex == Dex.Thena) {\n            uint256[] memory amounts = thenaRouter.getAmountsOut(\n                _amount,\n                thenaRoutes[_from][wNative]\n            );\n            return amounts[amounts.length - 1];\n        }\n        revert(\"invalid dex\");\n    }\n\n    function zapInToken(\n        address _from,\n        uint256 _amount,\n        address _receiver\n    ) external override returns (uint256 nativeAmount) {\n        require(access[msg.sender], \"!auth\");\n\n        if (_amount == 0) {\n            return 0;\n        }\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), _amount);\n\n        Dex dex = pairToDex[_from][wNative];\n        nativeAmount = _swapTokenForNative(dex, _from, _amount, _receiver);\n\n        emit ZapIn(dex, _from, _amount, _receiver, nativeAmount);\n    }\n\n    function swapToken(\n        address _from,\n        address _to,\n        uint256 _amount,\n        address _receiver\n    ) external payable override returns (uint256) {\n        require(access[msg.sender], \"!auth\");\n\n        if (_amount == 0) {\n            return 0;\n        }\n\n        uint256 amountOut;\n        if (AddressLib.isPlatformToken(_from)) {\n            require(_amount == msg.value, \"invalid amount\");\n            uint256[] memory amounts = pancakeRouter.swapExactETHForTokens{\n                value: _amount\n            }(0, _getPcsPath(wNative, _to), _receiver, block.timestamp);\n            amountOut = amounts[amounts.length - 1];\n        } else {\n            require(msg.value == 0, \"invalid msg.value\");\n            IERC20(_from).safeTransferFrom(msg.sender, address(this), _amount);\n            _approveTokenIfNeeded(_from, address(pancakeRouter), _amount);\n            uint256[] memory amounts = pancakeRouter.swapExactTokensForTokens(\n                _amount,\n                0,\n                _getPcsPath(_from, _to),\n                _receiver,\n                block.timestamp\n            );\n            amountOut = amounts[amounts.length - 1];\n        }\n        emit Swapped(_from, _to, _amount, _receiver, amountOut);\n\n        return amountOut;\n    }\n\n    function setAccess(address _address, bool _status) external onlyOwner {\n        require(_address != address(0), \"invalid _address!\");\n\n        access[_address] = _status;\n        emit AccessSet(_address, _status);\n    }\n\n    function _approveTokenIfNeeded(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (IERC20(_token).allowance(address(this), _to) < _amount) {\n            IERC20(_token).safeApprove(_to, 0);\n            IERC20(_token).safeApprove(_to, type(uint256).max);\n        }\n    }\n\n    function _swapTokenForNative(\n        Dex _dex,\n        address _token,\n        uint256 _amount,\n        address _receiver\n    ) internal returns (uint256) {\n        if (_dex == Dex.PCS) {\n            _approveTokenIfNeeded(_token, address(pancakeRouter), _amount);\n            uint256[] memory amounts = pancakeRouter.swapExactTokensForETH(\n                _amount,\n                0,\n                _getPcsPath(_token, wNative),\n                _receiver,\n                block.timestamp\n            );\n            return amounts[amounts.length - 1];\n        }\n\n        if (_dex == Dex.Thena) {\n            _approveTokenIfNeeded(_token, address(thenaRouter), _amount);\n            uint256[] memory amounts = thenaRouter.swapExactTokensForETH(\n                _amount,\n                0,\n                thenaRoutes[_token][wNative],\n                _receiver,\n                block.timestamp\n            );\n            return amounts[amounts.length - 1];\n        }\n        revert(\"invalid dex\");\n    }\n\n    function _getPcsPath(address _from, address _to)\n        internal\n        view\n        returns (address[] memory)\n    {\n        address[] memory path = pancakePath.getPath(_from, _to);\n        if (path.length == 0) {\n            path = new address[](2);\n            path[0] = _from;\n            path[1] = _to;\n        }\n        return path;\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/PancakePath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./Interfaces/IPancakePath.sol\";\n\ncontract PancakePath is IPancakePath, OwnableUpgradeable {\n    mapping(address => mapping(address => address[])) public paths;\n\n    function initialize() public initializer {\n        __Ownable_init();\n    }\n\n    function setPath(\n        address _from,\n        address _to,\n        address[] calldata _path\n    ) external override onlyOwner {\n        if (_path.length == 0) {\n            delete paths[_from][_to];\n            return;\n        }\n        require(_path.length >= 2, \"invalid path length\");\n        require(_path[0] == _from, \"invalid path\");\n        require(_path[_path.length - 1] == _to, \"invalid path\");\n\n        paths[_from][_to] = _path;\n    }\n\n    function getPath(address _from, address _to)\n        external\n        view\n        override\n        returns (address[] memory)\n    {\n        return paths[_from][_to];\n    }\n}\n"
    },
    "contracts/QuollExternalToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\nimport \"./Interfaces/IQuollExternalToken.sol\";\n\ncontract QuollExternalToken is\n    IQuollExternalToken,\n    ERC20Upgradeable,\n    OwnableUpgradeable\n{\n    address public operator;\n\n    // --- Events ---\n    event OperatorUpdated(address _operator);\n\n    function initialize(string memory _name, string memory _symbol)\n        public\n        initializer\n    {\n        __Ownable_init();\n\n        __ERC20_init_unchained(_name, _symbol);\n\n        emit OperatorUpdated(msg.sender);\n    }\n\n    function setOperator(address _operator) external onlyOwner {\n        require(operator == address(0), \"already set!\");\n        operator = _operator;\n\n        emit OperatorUpdated(_operator);\n    }\n\n    function mint(address _to, uint256 _amount) external override {\n        require(msg.sender == operator, \"!authorized\");\n\n        _mint(_to, _amount);\n    }\n\n    function burn(address _from, uint256 _amount) external override {\n        require(msg.sender == operator, \"!authorized\");\n\n        _burn(_from, _amount);\n    }\n}\n"
    },
    "contracts/QuollMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./Interfaces/IQuollMasterChef.sol\";\n\ncontract QuollMasterChef is IQuollMasterChef, OwnableUpgradeable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of QUOs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accQuoPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accQuoPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. QUO to distribute per block.\n        uint256 lastRewardBlock; // Last block number that QUOs distribution occurs.\n        uint256 accQuoPerShare; // Accumulated QUOs per share, times 1e12. See below.\n        IRewarder rewarder;\n    }\n\n    //quo\n    IERC20 public quo;\n    // The block number when QUO mining starts.\n    uint256 public startBlock;\n    // Block number when bonus QUO period ends.\n    uint256 public bonusEndBlock;\n    // QUO tokens created per block.\n    uint256 public rewardPerBlock;\n    // Bonus muliplier for early quo makers.\n    uint256 public constant BONUS_MULTIPLIER = 2;\n\n    // Info of each pool.\n    PoolInfo[] public override poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public override userInfo;\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint;\n\n    // Events\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event RewardPaid(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount\n    );\n\n    function initialize() public initializer {\n        __Ownable_init();\n    }\n\n    function setParams(\n        IERC20 _quo,\n        uint256 _rewardPerBlock,\n        uint256 _startBlock,\n        uint256 _bonusEndBlock\n    ) external onlyOwner {\n        require(address(quo) == address(0), \"!init\");\n\n        require(address(_quo) != address(0), \"invalid _quo!\");\n        require(\n            _bonusEndBlock >= _startBlock,\n            \"invalid _startBlock or _bonusEndBlock\"\n        );\n\n        quo = _quo;\n        rewardPerBlock = _rewardPerBlock;\n        bonusEndBlock = _bonusEndBlock;\n        startBlock = _startBlock;\n    }\n\n    function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\n        massUpdatePools();\n        rewardPerBlock = _rewardPerBlock;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        IRewarder _rewarder,\n        bool _withUpdate\n    ) external onlyOwner {\n        require(address(_lpToken) != address(0), \"invalid _lpToken!\");\n        _checkDuplicate(_lpToken);\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock\n            ? block.number\n            : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                allocPoint: _allocPoint,\n                lastRewardBlock: lastRewardBlock,\n                accQuoPerShare: 0,\n                rewarder: _rewarder\n            })\n        );\n    }\n\n    function _checkDuplicate(IERC20 _lpToken) internal view {\n        for (uint256 i = 0; i < poolInfo.length; i++) {\n            require(_lpToken != poolInfo[i].lpToken, \"existing _lpToken!\");\n        }\n    }\n\n    // Update the given pool's QUO allocation point. Can only be called by the owner.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        IRewarder _rewarder,\n        bool _updateRewarder\n    ) external onlyOwner {\n        massUpdatePools();\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\n            _allocPoint\n        );\n        poolInfo[_pid].allocPoint = _allocPoint;\n        if (_updateRewarder) {\n            poolInfo[_pid].rewarder = _rewarder;\n        }\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to)\n        public\n        view\n        returns (uint256)\n    {\n        if (_to <= bonusEndBlock) {\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\n        } else if (_from >= bonusEndBlock) {\n            return _to.sub(_from);\n        } else {\n            return\n                bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\n                    _to.sub(bonusEndBlock)\n                );\n        }\n    }\n\n    // View function to see pending QUOs on frontend.\n    function pendingQuo(uint256 _pid, address _user)\n        external\n        view\n        returns (uint256)\n    {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accQuoPerShare = pool.accQuoPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(\n                pool.lastRewardBlock,\n                block.number\n            );\n            uint256 quoReward = multiplier\n                .mul(rewardPerBlock)\n                .mul(pool.allocPoint)\n                .div(totalAllocPoint);\n            accQuoPerShare = accQuoPerShare.add(\n                quoReward.mul(1e12).div(lpSupply)\n            );\n        }\n        return user.amount.mul(accQuoPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    // Update reward vairables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 quoReward = multiplier\n            .mul(rewardPerBlock)\n            .mul(pool.allocPoint)\n            .div(totalAllocPoint);\n        pool.accQuoPerShare = pool.accQuoPerShare.add(\n            quoReward.mul(1e12).div(lpSupply)\n        );\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Deposit LP tokens to MasterChef for QUO allocation.\n    function deposit(uint256 _pid, uint256 _amount) external override {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        uint256 pending = 0;\n        if (user.amount > 0) {\n            pending = user.amount.mul(pool.accQuoPerShare).div(1e12).sub(\n                user.rewardDebt\n            );\n            safeRewardTransfer(msg.sender, pending);\n        }\n        pool.lpToken.safeTransferFrom(\n            address(msg.sender),\n            address(this),\n            _amount\n        );\n        user.amount = user.amount.add(_amount);\n        user.rewardDebt = user.amount.mul(pool.accQuoPerShare).div(1e12);\n\n        //extra rewards\n        IRewarder _rewarder = pool.rewarder;\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onReward(\n                _pid,\n                msg.sender,\n                msg.sender,\n                pending,\n                user.amount\n            );\n        }\n\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) external {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accQuoPerShare).div(1e12).sub(\n            user.rewardDebt\n        );\n        safeRewardTransfer(msg.sender, pending);\n        user.amount = user.amount.sub(_amount);\n        user.rewardDebt = user.amount.mul(pool.accQuoPerShare).div(1e12);\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\n\n        //extra rewards\n        IRewarder _rewarder = pool.rewarder;\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onReward(\n                _pid,\n                msg.sender,\n                msg.sender,\n                pending,\n                user.amount\n            );\n        }\n\n        emit RewardPaid(msg.sender, _pid, pending);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    function claim(uint256 _pid, address _account) external override {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_account];\n\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accQuoPerShare).div(1e12).sub(\n            user.rewardDebt\n        );\n        safeRewardTransfer(_account, pending);\n        user.rewardDebt = user.amount.mul(pool.accQuoPerShare).div(1e12);\n\n        //extra rewards\n        IRewarder _rewarder = pool.rewarder;\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onReward(_pid, _account, _account, pending, user.amount);\n        }\n\n        emit RewardPaid(_account, _pid, pending);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) external {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n\n        //extra rewards\n        IRewarder _rewarder = pool.rewarder;\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onReward(_pid, msg.sender, msg.sender, 0, 0);\n        }\n    }\n\n    // Safe quo transfer function, just in case if rounding error causes pool to not have enough QUOs.\n    function safeRewardTransfer(address _to, uint256 _amount) internal {\n        uint256 quoBal = quo.balanceOf(address(this));\n        if (_amount > quoBal) {\n            quo.safeTransfer(_to, quoBal);\n        } else {\n            quo.safeTransfer(_to, _amount);\n        }\n    }\n}\n"
    },
    "contracts/QuollToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\nimport \"./Interfaces/IQuollToken.sol\";\n\ncontract QuollToken is IQuollToken, ERC20Upgradeable, OwnableUpgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    mapping(address => bool) public access;\n\n    uint256 public maxSupply;\n    uint256 public totalCliffs;\n    uint256 public reductionPerCliff;\n\n    uint256 public constant FACTOR_DENOMINATOR = 10000;\n    uint256 public factor;\n\n    // --- Events ---\n    event AccessUpdated(address _operator, bool _access);\n\n    function initialize() public initializer {\n        __Ownable_init();\n\n        __ERC20_init_unchained(\"Quoll Token\", \"QUO\");\n\n        access[msg.sender] = true;\n\n        maxSupply = 1e27; // 1e27 = 1e9 * 1e18, 1B\n        totalCliffs = 1000;\n        reductionPerCliff = maxSupply.div(totalCliffs);\n\n        emit AccessUpdated(msg.sender, true);\n    }\n\n    function setAccess(address _operator, bool _access) external onlyOwner {\n        require(_operator != address(0), \"invalid _operator!\");\n        access[_operator] = _access;\n\n        emit AccessUpdated(_operator, _access);\n    }\n\n    function setFactor(uint256 _factor) external onlyOwner {\n        factor = _factor;\n    }\n\n    function mint(address _to, uint256 _amount) external override {\n        require(access[msg.sender], \"!auth\");\n\n        uint256 supply = totalSupply();\n        if (supply == 0) {\n            //premine, one time only\n            _mint(_to, _amount);\n            return;\n        }\n\n        //use current supply to gauge cliff\n        //this will cause a bit of overflow into the next cliff range\n        //but should be within reasonable levels.\n        //requires a max supply check though\n        uint256 cliff = supply.div(reductionPerCliff);\n        //mint if below total cliffs\n        if (cliff < totalCliffs) {\n            //for reduction% take inverse of current cliff\n            uint256 reduction = totalCliffs.sub(cliff);\n            //reduce\n            _amount = _amount.mul(reduction).div(totalCliffs);\n            _amount = factor == 0\n                ? _amount\n                : _amount.mul(factor).div(FACTOR_DENOMINATOR);\n\n            //supply cap check\n            uint256 amtTillMax = maxSupply.sub(supply);\n            if (_amount > amtTillMax) {\n                _amount = amtTillMax;\n            }\n\n            //mint\n            _mint(_to, _amount);\n        }\n    }\n}\n"
    },
    "contracts/QuollZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./lib/TransferHelper.sol\";\nimport \"./lib/Interfaces/IWNative.sol\";\nimport \"./lib/Interfaces/IWNativeRelayer.sol\";\nimport \"./Interfaces/IBaseRewardPool.sol\";\nimport \"./Interfaces/IWombatBooster.sol\";\nimport \"./Interfaces/Wombat/IAsset.sol\";\nimport \"./Interfaces/Wombat/IPool.sol\";\n\ncontract QuollZap is OwnableUpgradeable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address public wNative;\n    address public wNativeRelayer;\n\n    IWombatBooster public booster;\n\n    function initialize() public initializer {\n        __Ownable_init();\n    }\n\n    function setParams(\n        address _wNative,\n        address _wNativeRelayer,\n        address _booster\n    ) external onlyOwner {\n        require(_wNative != address(0), \"invalid _wNative!\");\n        require(_wNativeRelayer != address(0), \"invalid _wNativeRelayer!\");\n        require(_booster != address(0), \"invalid _booster!\");\n\n        wNative = _wNative;\n        wNativeRelayer = _wNativeRelayer;\n        IERC20(wNative).safeApprove(wNativeRelayer, uint256(-1));\n\n        booster = IWombatBooster(_booster);\n    }\n\n    function zapIn(\n        uint256 _pid,\n        uint256 _amount,\n        uint256 _minimumAmount,\n        bool _stake\n    ) external payable {\n        (address lptoken, address token, , address rewardPool, ) = booster\n            .poolInfo(_pid);\n\n        address underlyingToken = IAsset(lptoken).underlyingToken();\n        if (underlyingToken == wNative) {\n            require(_amount == msg.value, \"invalid amount\");\n            IWNative(wNative).deposit{value: _amount}();\n        } else {\n            require(msg.value == 0, \"invalid msg.value\");\n            IERC20(underlyingToken).safeTransferFrom(\n                msg.sender,\n                address(this),\n                _amount\n            );\n        }\n\n        uint256 liquidity;\n        {\n            address pool = IAsset(lptoken).pool();\n            IERC20(underlyingToken).safeApprove(pool, 0);\n            IERC20(underlyingToken).safeApprove(pool, _amount);\n\n            uint256 lptokenBalBefore = IERC20(lptoken).balanceOf(address(this));\n            liquidity = IPool(pool).deposit(\n                underlyingToken,\n                _amount,\n                _minimumAmount,\n                address(this),\n                block.timestamp,\n                false\n            );\n            uint256 lptokenBalAfter = IERC20(lptoken).balanceOf(address(this));\n            require(\n                lptokenBalAfter.sub(lptokenBalBefore) >= liquidity,\n                \"invalid depost\"\n            );\n        }\n\n        uint256 tokenBal = IERC20(token).balanceOf(address(this));\n        IERC20(lptoken).safeApprove(address(booster), 0);\n        IERC20(lptoken).safeApprove(address(booster), liquidity);\n        booster.deposit(_pid, liquidity, false);\n        uint256 tokenAmount = IERC20(token).balanceOf(address(this)).sub(\n            tokenBal\n        );\n\n        if (_stake) {\n            IERC20(token).safeApprove(rewardPool, 0);\n            IERC20(token).safeApprove(rewardPool, tokenAmount);\n            IBaseRewardPool(rewardPool).stakeFor(msg.sender, tokenAmount);\n        } else {\n            IERC20(token).safeTransfer(msg.sender, tokenAmount);\n        }\n    }\n\n    function withdraw(uint256 _pid, uint256 _amount) external {\n        (address lptoken, address token, , address rewardPool, ) = booster\n            .poolInfo(_pid);\n        IBaseRewardPool(rewardPool).withdrawFor(msg.sender, _amount);\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 lptokenBal = IERC20(lptoken).balanceOf(address(this));\n        booster.withdraw(_pid, _amount);\n        uint256 lptokenAmount = IERC20(lptoken).balanceOf(address(this)).sub(\n            lptokenBal\n        );\n        IERC20(lptoken).safeTransfer(msg.sender, lptokenAmount);\n    }\n\n    function zapOut(\n        uint256 _pid,\n        uint256 _amount,\n        uint256 _minimumAmount,\n        bool _stake\n    ) external {\n        (address lptoken, address token, , address rewardPool, ) = booster\n            .poolInfo(_pid);\n\n        if (_stake) {\n            IBaseRewardPool(rewardPool).withdrawFor(msg.sender, _amount);\n        }\n\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint256 lptokenBal = IERC20(lptoken).balanceOf(address(this));\n        booster.withdraw(_pid, _amount);\n        uint256 lptokenAmount = IERC20(lptoken).balanceOf(address(this)).sub(\n            lptokenBal\n        );\n\n        address underlyingToken = IAsset(lptoken).underlyingToken();\n        address pool = IAsset(lptoken).pool();\n        IERC20(lptoken).safeApprove(pool, 0);\n        IERC20(lptoken).safeApprove(pool, lptokenAmount);\n\n        if (underlyingToken == wNative) {\n            uint256 underlyingTokenAmount = IPool(pool).withdraw(\n                underlyingToken,\n                lptokenAmount,\n                _minimumAmount,\n                address(this),\n                block.timestamp\n            );\n            IWNativeRelayer(wNativeRelayer).withdraw(\n                wNative,\n                underlyingTokenAmount\n            );\n            TransferHelper.safeTransferETH(msg.sender, underlyingTokenAmount);\n        } else {\n            IPool(pool).withdraw(\n                underlyingToken,\n                lptokenAmount,\n                _minimumAmount,\n                msg.sender,\n                block.timestamp\n            );\n        }\n    }\n\n    function claimRewards(uint256[] calldata _pids) external {\n        for (uint256 i = 0; i < _pids.length; i++) {\n            (, , , address rewardPool, ) = booster.poolInfo(_pids[i]);\n            require(rewardPool != address(0), \"invalid _pids\");\n            IBaseRewardPool(rewardPool).getReward(msg.sender);\n        }\n    }\n\n    function inCaseTokensGetStuck(address _token) external onlyOwner {\n        uint256 amount = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).safeTransfer(msg.sender, amount);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/QuoMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\ncontract QuoMinter is OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    address public quo;\n\n    uint256 public constant FACTOR_DENOMINATOR = 10000;\n    uint256 public factor;\n\n    mapping(address => bool) public access;\n\n    event AccessUpdated(address _operator, bool _access);\n    event Minted(address indexed _to, uint256 _amount);\n\n    function initialize(address _quo) public initializer {\n        __Ownable_init();\n\n        quo = _quo;\n        factor = FACTOR_DENOMINATOR;\n    }\n\n    function setFactor(uint256 _factor) external onlyOwner {\n        factor = _factor;\n    }\n\n    function setAccess(address _operator, bool _access) external onlyOwner {\n        require(_operator != address(0), \"invalid _operator!\");\n        access[_operator] = _access;\n\n        emit AccessUpdated(_operator, _access);\n    }\n\n    function mint(address _to, uint256 _amount) external {\n        require(access[msg.sender], \"!auth\");\n\n        uint256 mintAmount = _amount.mul(factor).div(FACTOR_DENOMINATOR);\n        require(\n            IERC20(quo).balanceOf(address(this)) >= mintAmount,\n            \"insufficient balance\"\n        );\n        IERC20(quo).safeTransfer(_to, mintAmount);\n\n        emit Minted(_to, mintAmount);\n    }\n}\n"
    },
    "contracts/QuoRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n/**\n *Submitted for verification at Etherscan.io on 2020-07-17\n */\n\n/*\n   ____            __   __        __   _\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n     /___/\n\n* Synthetix: QuoRewardPool.sol\n*\n* Docs: https://docs.synthetix.io/\n*\n*\n* MIT License\n* ===========\n*\n* Copyright (c) 2020 Synthetix\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./Interfaces/IRewards.sol\";\nimport \"./Interfaces/IBaseRewardPool.sol\";\n\ncontract QuoRewardPool is IRewards, OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    address public wom;\n\n    IERC20 public override stakingToken;\n    address[] public rewardTokens;\n\n    address public booster;\n    address public womDepositor;\n    address public qWomRewards;\n    IERC20 public qWomToken;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    struct Reward {\n        uint256 rewardPerTokenStored;\n        uint256 queuedRewards;\n    }\n\n    struct UserReward {\n        uint256 userRewardPerTokenPaid;\n        uint256 rewards;\n    }\n\n    mapping(address => Reward) public rewards;\n    mapping(address => bool) public isRewardToken;\n\n    mapping(address => mapping(address => UserReward)) public userRewards;\n\n    mapping(address => bool) public access;\n\n    mapping(address => uint256) public userLastTime;\n\n    mapping(address => uint256) public userAmountTime;\n\n    function initialize() public initializer {\n        __Ownable_init();\n    }\n\n    function setParams(\n        address _stakingToken,\n        address _wom,\n        address _womDepositor,\n        address _qWomRewards,\n        address _qWomToken,\n        address _booster\n    ) external onlyOwner {\n        require(\n            address(stakingToken) == address(0),\n            \"params has already been set\"\n        );\n\n        require(_stakingToken != address(0), \"invalid _stakingToken!\");\n        require(_wom != address(0), \"invalid _wom!\");\n        require(_womDepositor != address(0), \"invalid _womDepositor!\");\n        require(_qWomRewards != address(0), \"invalid _qWomRewards!\");\n        require(_qWomToken != address(0), \"invalid _qWomToken!\");\n        require(_booster != address(0), \"invalid _booster!\");\n\n        stakingToken = IERC20(_stakingToken);\n        wom = _wom;\n        booster = _booster;\n        womDepositor = _womDepositor;\n        qWomRewards = _qWomRewards;\n        qWomToken = IERC20(_qWomToken);\n\n        setAccess(_booster, true);\n    }\n\n    function addRewardToken(address _rewardToken) internal {\n        require(_rewardToken != address(0), \"invalid _rewardToken!\");\n        if (isRewardToken[_rewardToken]) {\n            return;\n        }\n        rewardTokens.push(_rewardToken);\n        isRewardToken[_rewardToken] = true;\n\n        emit RewardTokenAdded(_rewardToken);\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    modifier updateReward(address _account) {\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            address rewardToken = rewardTokens[i];\n            UserReward storage userReward = userRewards[_account][rewardToken];\n            userReward.rewards = earned(_account, rewardToken);\n            userReward.userRewardPerTokenPaid = rewards[rewardToken]\n                .rewardPerTokenStored;\n        }\n\n        userAmountTime[_account] = getUserAmountTime(_account);\n        userLastTime[_account] = now;\n\n        _;\n    }\n\n    function getRewardTokens()\n        external\n        view\n        override\n        returns (address[] memory)\n    {\n        return rewardTokens;\n    }\n\n    function getRewardTokensLength() external view override returns (uint256) {\n        return rewardTokens.length;\n    }\n\n    function earned(address _account, address _rewardToken)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        Reward memory reward = rewards[_rewardToken];\n        UserReward memory userReward = userRewards[_account][_rewardToken];\n        return\n            balanceOf(_account)\n                .mul(\n                    reward.rewardPerTokenStored.sub(\n                        userReward.userRewardPerTokenPaid\n                    )\n                )\n                .div(1e18)\n                .add(userReward.rewards);\n    }\n\n    function getUserAmountTime(address _account)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        uint256 lastTime = userLastTime[_account];\n        if (lastTime == 0) {\n            return 0;\n        }\n        uint256 userBalance = _balances[_account];\n        if (userBalance == 0) {\n            return userAmountTime[_account];\n        }\n        return userAmountTime[_account].add(now.sub(lastTime).mul(userBalance));\n    }\n\n    function stake(uint256 _amount) public override updateReward(msg.sender) {\n        require(_amount > 0, \"RewardPool : Cannot stake 0\");\n\n        //add supply\n        _totalSupply = _totalSupply.add(_amount);\n        //add to sender balance sheet\n        _balances[msg.sender] = _balances[msg.sender].add(_amount);\n        //take tokens from sender\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\n\n        emit Staked(msg.sender, _amount);\n    }\n\n    function stakeAll() external override {\n        uint256 balance = stakingToken.balanceOf(msg.sender);\n        stake(balance);\n    }\n\n    function stakeFor(address _for, uint256 _amount)\n        external\n        override\n        updateReward(_for)\n    {\n        require(_for != address(0), \"invalid _for!\");\n        require(_amount > 0, \"RewardPool : Cannot stake 0\");\n\n        //add supply\n        _totalSupply = _totalSupply.add(_amount);\n        //add to _for's balance sheet\n        _balances[_for] = _balances[_for].add(_amount);\n        //take tokens from sender\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\n\n        emit Staked(_for, _amount);\n    }\n\n    function withdraw(uint256 _amount)\n        public\n        override\n        updateReward(msg.sender)\n    {\n        require(_amount > 0, \"RewardPool : Cannot withdraw 0\");\n\n        _totalSupply = _totalSupply.sub(_amount);\n        _balances[msg.sender] = _balances[msg.sender].sub(_amount);\n        stakingToken.safeTransfer(msg.sender, _amount);\n        emit Withdrawn(msg.sender, _amount);\n\n        _getReward(msg.sender, false);\n    }\n\n    function withdrawAll() external override {\n        withdraw(_balances[msg.sender]);\n    }\n\n    function _getReward(address _account, bool _stake)\n        internal\n        updateReward(_account)\n    {\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            address rewardToken = rewardTokens[i];\n            uint256 reward = earned(_account, rewardToken);\n            if (reward > 0) {\n                userRewards[_account][rewardToken].rewards = 0;\n                if (rewardToken == address(qWomToken)) {\n                    if (_stake) {\n                        qWomToken.safeApprove(qWomRewards, 0);\n                        qWomToken.safeApprove(qWomRewards, reward);\n                        IBaseRewardPool(qWomRewards).stakeFor(_account, reward);\n                    } else {\n                        qWomToken.safeTransfer(_account, reward);\n                    }\n                } else {\n                    // other token\n                    IERC20(rewardToken).safeTransfer(_account, reward);\n                }\n\n                emit RewardPaid(_account, rewardToken, reward);\n            }\n        }\n    }\n\n    function getReward(bool _stake) external {\n        _getReward(msg.sender, _stake);\n    }\n\n    function donate(address _rewardToken, uint256 _amount)\n        external\n        payable\n        override\n    {\n        require(isRewardToken[_rewardToken], \"invalid token\");\n        IERC20(_rewardToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n        rewards[_rewardToken].queuedRewards = rewards[_rewardToken]\n            .queuedRewards\n            .add(_amount);\n    }\n\n    function queueNewRewards(address _rewardToken, uint256 _rewards)\n        external\n        payable\n        override\n    {\n        require(access[msg.sender], \"!authorized\");\n\n        addRewardToken(_rewardToken);\n\n        IERC20(_rewardToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _rewards\n        );\n\n        Reward storage rewardInfo = rewards[_rewardToken];\n\n        if (totalSupply() == 0) {\n            rewardInfo.queuedRewards = rewardInfo.queuedRewards.add(_rewards);\n            return;\n        }\n\n        _rewards = _rewards.add(rewardInfo.queuedRewards);\n        rewardInfo.queuedRewards = 0;\n\n        rewardInfo.rewardPerTokenStored = rewardInfo.rewardPerTokenStored.add(\n            _rewards.mul(1e18).div(totalSupply())\n        );\n        emit RewardAdded(_rewardToken, _rewards);\n    }\n\n    function setAccess(address _address, bool _status)\n        public\n        override\n        onlyOwner\n    {\n        require(_address != address(0), \"invalid _address!\");\n        access[_address] = _status;\n        emit AccessSet(_address, _status);\n    }\n}\n"
    },
    "contracts/SmartConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./Interfaces/ISmartConvertor.sol\";\nimport \"./Interfaces/IWomDepositor.sol\";\nimport \"./Interfaces/Wombat/IWombatRouter.sol\";\nimport \"./Interfaces/Wombat/IAsset.sol\";\nimport \"./Interfaces/Wombat/IPool.sol\";\n\ncontract SmartConvertor is ISmartConvertor, OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    address public wom;\n    address public qWom;\n    address public womDepositor;\n\n    address public router;\n    address public pool;\n\n    uint256 public constant DENOMINATOR = 10000;\n    uint256 public buyThreshold;\n    uint256 public buyPercent;\n    uint256 public womCR;\n    uint256 public qWomCR;\n    uint256 public slippagePct;\n\n    event QWomObtained(\n        address _user,\n        uint256 _depositedWom,\n        uint256 _obtainedQWom\n    );\n\n    function initialize() public initializer {\n        __Ownable_init();\n    }\n\n    function setParams(\n        address _wom,\n        address _qWom,\n        address _womDepositor,\n        address _router,\n        address _pool\n    ) external onlyOwner {\n        require(wom == address(0), \"params have already been set\");\n        require(_wom != address(0), \"invalid _wom!\");\n        require(_qWom != address(0), \"invalid _qWom!\");\n        require(_womDepositor != address(0), \"invalid _womDepositor!\");\n        require(_router != address(0), \"invalid _router!\");\n        require(_pool != address(0), \"invalid _pool!\");\n\n        wom = _wom;\n        qWom = _qWom;\n        womDepositor = _womDepositor;\n\n        router = _router;\n        pool = _pool;\n\n        buyThreshold = 10530;\n        buyPercent = 10000;\n        womCR = 12000;\n        qWomCR = 8000;\n        slippagePct = 500;\n\n        IERC20(wom).safeApprove(router, type(uint256).max);\n        IERC20(wom).safeApprove(womDepositor, type(uint256).max);\n    }\n\n    function setBuyThreshold(uint256 newValue) external onlyOwner {\n        buyThreshold = newValue;\n    }\n\n    function setBuyPercent(uint256 newValue) external onlyOwner {\n        require(newValue >= 0 && newValue <= DENOMINATOR, \"Not in range\");\n        buyPercent = newValue;\n    }\n\n    function setWomCR(uint256 newValue) external onlyOwner {\n        womCR = newValue;\n    }\n\n    function setQWomCR(uint256 newValue) external onlyOwner {\n        qWomCR = newValue;\n    }\n\n    function setSlippage(uint256 newValue) external onlyOwner {\n        require(newValue >= 0 && newValue <= DENOMINATOR, \"Not in range\");\n        slippagePct = newValue;\n    }\n\n    /// @notice estimates the amount of qWom recieved if bought on wombat\n    function estimateOutAmount(uint256 amountSold)\n        public\n        view\n        returns (uint256 amountOut)\n    {\n        (amountOut, ) = IWombatRouter(router).getAmountOut(\n            _getTokenPath(),\n            _getPoolPath(),\n            int256(amountSold)\n        );\n    }\n\n    function maxAmountToBuy() public view returns (uint256) {\n        IAsset womAsset = IAsset(IPool(pool).addressOfAsset(wom));\n        if (\n            uint256(womAsset.cash()) >=\n            uint256(womAsset.liability()).mul(womCR).div(DENOMINATOR)\n        ) {\n            return 0;\n        }\n        uint256 maxWom = uint256(womAsset.liability())\n            .mul(womCR)\n            .div(DENOMINATOR)\n            .sub(uint256(womAsset.cash()));\n        IAsset qWomAsset = IAsset(IPool(pool).addressOfAsset(qWom));\n        if (\n            uint256(qWomAsset.cash()) <=\n            uint256(qWomAsset.liability()).mul(qWomCR).div(DENOMINATOR)\n        ) {\n            return 0;\n        }\n        uint256 maxQWom = uint256(qWomAsset.cash()).sub(\n            uint256(qWomAsset.liability()).mul(qWomCR).div(DENOMINATOR)\n        );\n        (uint256 maxWomIn, ) = IWombatRouter(router).getAmountIn(\n            _getTokenPath(),\n            _getPoolPath(),\n            maxQWom\n        );\n        return Math.min(maxWom, maxWomIn);\n    }\n\n    function estimateTotalConversion(uint256 _amount)\n        external\n        view\n        returns (uint256 minimumEstimatedTotal)\n    {\n        minimumEstimatedTotal = _amount;\n        if (\n            estimateOutAmount(_amount) >=\n            _amount.mul(buyThreshold).div(DENOMINATOR)\n        ) {\n            uint256 amountToBuy = minimumEstimatedTotal.mul(buyPercent).div(\n                DENOMINATOR\n            );\n            uint256 maxAmountToRespectPriceImpact = maxAmountToBuy();\n            if (amountToBuy > maxAmountToRespectPriceImpact) {\n                amountToBuy = maxAmountToRespectPriceImpact;\n            }\n            if (amountToBuy == 0) {\n                return minimumEstimatedTotal;\n            }\n            uint256 estimatedOutAmount = estimateOutAmount(amountToBuy);\n            if (amountToBuy < estimatedOutAmount) {\n                minimumEstimatedTotal = minimumEstimatedTotal.sub(amountToBuy);\n                minimumEstimatedTotal = minimumEstimatedTotal.add(\n                    estimatedOutAmount\n                );\n            }\n        }\n    }\n\n    function _depositFor(uint256 _amount, address _for)\n        internal\n        returns (uint256 obtainedAmount)\n    {\n        IERC20(wom).safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 amountToConvert = _amount;\n        if (\n            estimateOutAmount(_amount) >=\n            _amount.mul(buyThreshold).div(DENOMINATOR)\n        ) {\n            uint256 amountToBuy = amountToConvert.mul(buyPercent).div(\n                DENOMINATOR\n            );\n            uint256 maxAmountToRespectPriceImpact = maxAmountToBuy();\n            if (amountToBuy > maxAmountToRespectPriceImpact) {\n                amountToBuy = maxAmountToRespectPriceImpact;\n            }\n            if (amountToBuy > 0) {\n                uint256 estimatedOutAmount = estimateOutAmount(amountToBuy);\n                if (amountToBuy < estimatedOutAmount) {\n                    obtainedAmount = IWombatRouter(router)\n                        .swapExactTokensForTokens(\n                            _getTokenPath(),\n                            _getPoolPath(),\n                            amountToBuy,\n                            estimatedOutAmount\n                                .mul(DENOMINATOR.sub(slippagePct))\n                                .div(DENOMINATOR),\n                            _for,\n                            block.timestamp\n                        );\n                    require(\n                        obtainedAmount > amountToBuy,\n                        \"Transaction is disadvantageous\"\n                    );\n                    amountToConvert = amountToConvert.sub(amountToBuy);\n                }\n            }\n        }\n        if (amountToConvert > 0) {\n            obtainedAmount = obtainedAmount.add(amountToConvert);\n            IWomDepositor(womDepositor).deposit(amountToConvert, false);\n            IERC20(qWom).safeTransfer(_for, amountToConvert);\n        }\n        emit QWomObtained(_for, _amount, obtainedAmount);\n    }\n\n    function deposit(uint256 _amount)\n        external\n        override\n        returns (uint256 obtainedAmount)\n    {\n        obtainedAmount = _depositFor(_amount, msg.sender);\n    }\n\n    function depositFor(uint256 _amount, address _for)\n        external\n        override\n        returns (uint256 obtainedAmount)\n    {\n        obtainedAmount = _depositFor(_amount, _for);\n    }\n\n    function _getTokenPath() internal view returns (address[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = wom;\n        path[1] = qWom;\n        return path;\n    }\n\n    function _getPoolPath() internal view returns (address[] memory) {\n        address[] memory path = new address[](1);\n        path[0] = pool;\n        return path;\n    }\n}\n"
    },
    "contracts/VestedEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nimport \"./lib/ManagerUpgradeable.sol\";\n\ncontract VestedEscrow is ManagerUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    uint256 public constant PRECISION = 1e4;\n\n    IERC20 public token;\n\n    uint256 public startTime;\n    // initial lock duration in second\n    uint256 public lockDuration;\n    uint256 public lockPercent;\n    // linear release duration in second\n    uint256 public releaseDuration;\n\n    mapping(address => uint256) public totalAmounts;\n    mapping(address => uint256) public claimedAmounts;\n\n    event Funded(address indexed _recipient, uint256 _amount);\n    event Claimed(address indexed _recipient, uint256 _amount);\n\n    function initialize(\n        address _token,\n        uint256 _startTime,\n        uint256 _lockDuration,\n        uint256 _lockPercent,\n        uint256 _releaseDuration\n    ) public initializer {\n        __Ownable_init();\n\n        require(_token != address(0), \"invalid _token!\");\n        require(_lockPercent <= PRECISION, \"invalid _lockPercent!\");\n        require(_releaseDuration > 0, \"invalid _releaseDuration!\");\n\n        token = IERC20(_token);\n        startTime = _startTime;\n        lockDuration = _lockDuration;\n        lockPercent = _lockPercent;\n        releaseDuration = _releaseDuration;\n    }\n\n    function fund(address[] calldata _recipients, uint256[] calldata _amounts)\n        external\n        onlyManager\n    {\n        require(\n            _recipients.length == _amounts.length && _recipients.length > 0,\n            \"invalid _recipients or _amounts\"\n        );\n        uint256 totalAmount = 0;\n        for (uint256 i = 0; i < _recipients.length; i++) {\n            address recipient = _recipients[i];\n            uint256 amount = _amounts[i];\n            require(recipient != address(0), \"invalid recipient!\");\n            require(amount != 0, \"invalid amount!\");\n            require(totalAmounts[recipient] == 0, \"recipient already funded!\");\n            totalAmounts[recipient] = amount;\n            totalAmount = totalAmount.add(amount);\n\n            emit Funded(recipient, amount);\n        }\n\n        token.safeTransferFrom(msg.sender, address(this), totalAmount);\n    }\n\n    function getClaimableAmount(address _user) public view returns (uint256) {\n        // lock duration has not passed yet\n        if (block.timestamp < startTime + lockDuration) {\n            return 0;\n        }\n        uint256 totalAmount = totalAmounts[_user];\n        if (totalAmount == 0) {\n            return 0;\n        }\n        uint256 claimedAmount = claimedAmounts[_user];\n        if (claimedAmount >= totalAmount) {\n            return 0;\n        }\n        uint256 lockedAmount = lockPercent.mul(totalAmount).div(PRECISION);\n        uint256 unlockedAmount = totalAmount.sub(lockedAmount);\n        if (unlockedAmount == 0) {\n            return lockedAmount;\n        }\n        uint256 elapsed = Math.min(\n            releaseDuration,\n            block.timestamp - startTime - lockDuration\n        );\n        uint256 releasedAmount = unlockedAmount.mul(elapsed).div(\n            releaseDuration\n        );\n        return\n            Math.min(\n                lockedAmount.add(releasedAmount).sub(claimedAmount),\n                totalAmount.sub(claimedAmount)\n            );\n    }\n\n    function claim() external {\n        uint256 claimableAmount = getClaimableAmount(msg.sender);\n        if (claimableAmount == 0) {\n            return;\n        }\n\n        claimedAmounts[msg.sender] = claimedAmounts[msg.sender].add(\n            claimableAmount\n        );\n        token.safeTransfer(msg.sender, claimableAmount);\n\n        emit Claimed(msg.sender, claimableAmount);\n    }\n}\n"
    },
    "contracts/VirtualBalanceRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./Interfaces/IVirtualBalanceRewardPool.sol\";\nimport \"./Interfaces/IWombatBooster.sol\";\nimport \"./lib/TransferHelper.sol\";\n\ncontract VirtualBalanceRewardPool is\n    IVirtualBalanceRewardPool,\n    OwnableUpgradeable\n{\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using TransferHelper for address;\n\n    address public operator;\n\n    address[] public rewardTokens;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    struct Reward {\n        uint256 rewardPerTokenStored;\n        uint256 queuedRewards;\n    }\n\n    struct UserReward {\n        uint256 userRewardPerTokenPaid;\n        uint256 rewards;\n    }\n\n    mapping(address => Reward) public rewards;\n    mapping(address => bool) public isRewardToken;\n\n    mapping(address => mapping(address => UserReward)) public userRewards;\n\n    mapping(address => bool) public access;\n\n    mapping(address => uint256) public userLastTime;\n\n    mapping(address => uint256) public userAmountTime;\n\n    function initialize(address _operator) public initializer {\n        __Ownable_init();\n\n        operator = _operator;\n\n        access[operator] = true;\n\n        emit OperatorUpdated(_operator);\n    }\n\n    modifier onlyOperator() {\n        require(msg.sender == operator, \"Only Operator\");\n        _;\n    }\n\n    function addRewardToken(address _rewardToken) internal {\n        require(_rewardToken != address(0), \"invalid _rewardToken!\");\n        if (isRewardToken[_rewardToken]) {\n            return;\n        }\n        rewardTokens.push(_rewardToken);\n        isRewardToken[_rewardToken] = true;\n\n        emit RewardTokenAdded(_rewardToken);\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    modifier updateReward(address _account) {\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            address rewardToken = rewardTokens[i];\n            UserReward storage userReward = userRewards[_account][rewardToken];\n            userReward.rewards = earned(_account, rewardToken);\n            userReward.userRewardPerTokenPaid = rewards[rewardToken]\n                .rewardPerTokenStored;\n        }\n\n        userAmountTime[_account] = getUserAmountTime(_account);\n        userLastTime[_account] = now;\n\n        _;\n    }\n\n    function getRewardTokens()\n        external\n        view\n        override\n        returns (address[] memory)\n    {\n        return rewardTokens;\n    }\n\n    function getRewardTokensLength() external view override returns (uint256) {\n        return rewardTokens.length;\n    }\n\n    function earned(address _account, address _rewardToken)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        Reward memory reward = rewards[_rewardToken];\n        UserReward memory userReward = userRewards[_account][_rewardToken];\n        return\n            balanceOf(_account)\n                .mul(\n                    reward.rewardPerTokenStored.sub(\n                        userReward.userRewardPerTokenPaid\n                    )\n                )\n                .div(1e18)\n                .add(userReward.rewards);\n    }\n\n    function getUserAmountTime(address _account)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        uint256 lastTime = userLastTime[_account];\n        if (lastTime == 0) {\n            return 0;\n        }\n        uint256 userBalance = _balances[_account];\n        if (userBalance == 0) {\n            return userAmountTime[_account];\n        }\n        return userAmountTime[_account].add(now.sub(lastTime).mul(userBalance));\n    }\n\n    function stakeFor(address _for, uint256 _amount)\n        external\n        override\n        onlyOperator\n        updateReward(_for)\n    {\n        require(_for != address(0), \"invalid _for!\");\n        require(_amount > 0, \"RewardPool : Cannot stake 0\");\n\n        //give to _for\n        _totalSupply = _totalSupply.add(_amount);\n        _balances[_for] = _balances[_for].add(_amount);\n\n        emit Staked(_for, _amount);\n    }\n\n    function withdrawFor(address _account, uint256 _amount)\n        external\n        override\n        onlyOperator\n        updateReward(_account)\n    {\n        require(_amount > 0, \"RewardPool : Cannot withdraw 0\");\n\n        _totalSupply = _totalSupply.sub(_amount);\n        _balances[_account] = _balances[_account].sub(_amount);\n\n        emit Withdrawn(_account, _amount);\n\n        getReward(_account);\n    }\n\n    function getReward(address _account)\n        public\n        override\n        onlyOperator\n        updateReward(_account)\n    {\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            address rewardToken = rewardTokens[i];\n            uint256 reward = earned(_account, rewardToken);\n            if (reward > 0) {\n                userRewards[_account][rewardToken].rewards = 0;\n                rewardToken.safeTransferToken(_account, reward);\n                emit RewardPaid(_account, rewardToken, reward);\n            }\n        }\n    }\n\n    function donate(address _rewardToken, uint256 _amount)\n        external\n        payable\n        override\n    {\n        require(isRewardToken[_rewardToken], \"invalid token\");\n        if (AddressLib.isPlatformToken(_rewardToken)) {\n            require(_amount == msg.value, \"invalid amount\");\n        } else {\n            require(msg.value == 0, \"invalid msg.value\");\n            IERC20(_rewardToken).safeTransferFrom(\n                msg.sender,\n                address(this),\n                _amount\n            );\n        }\n\n        rewards[_rewardToken].queuedRewards = rewards[_rewardToken]\n            .queuedRewards\n            .add(_amount);\n    }\n\n    function queueNewRewards(address _rewardToken, uint256 _rewards)\n        external\n        payable\n        override\n    {\n        require(access[msg.sender], \"!auth\");\n\n        addRewardToken(_rewardToken);\n\n        if (AddressLib.isPlatformToken(_rewardToken)) {\n            require(_rewards == msg.value, \"invalid amount\");\n        } else {\n            require(msg.value == 0, \"invalid msg.value\");\n            IERC20(_rewardToken).safeTransferFrom(\n                msg.sender,\n                address(this),\n                _rewards\n            );\n        }\n\n        Reward storage rewardInfo = rewards[_rewardToken];\n\n        if (totalSupply() == 0) {\n            rewardInfo.queuedRewards = rewardInfo.queuedRewards.add(_rewards);\n            return;\n        }\n\n        _rewards = _rewards.add(rewardInfo.queuedRewards);\n        rewardInfo.queuedRewards = 0;\n\n        rewardInfo.rewardPerTokenStored = rewardInfo.rewardPerTokenStored.add(\n            _rewards.mul(1e18).div(totalSupply())\n        );\n        emit RewardAdded(_rewardToken, _rewards);\n    }\n\n    function setAccess(address _address, bool _status)\n        external\n        override\n        onlyOwner\n    {\n        require(_address != address(0), \"invalid _address!\");\n\n        access[_address] = _status;\n        emit AccessSet(_address, _status);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/VlQuo.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./Interfaces/IBaseRewardPool.sol\";\nimport \"./Interfaces/IVlQuoV2.sol\";\n\ncontract VlQuo is OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    address public wom;\n    IERC20 public quo;\n\n    address public booster;\n    address public womDepositor;\n    address public qWomRewards;\n    IERC20 public qWomToken;\n\n    uint256 public constant WEEK = 86400 * 7;\n    uint256 public constant MAX_LOCK_WEEKS = 52;\n\n    struct LockData {\n        mapping(uint256 => uint256) weeklyWeight;\n        mapping(uint256 => uint256) weeklyUnlock;\n        uint256 lastUnlockedWeek;\n    }\n\n    // user address => LockData\n    mapping(address => LockData) public userLockData;\n\n    mapping(uint256 => uint256) public weeklyTotalWeight;\n\n    // when set to true, other accounts cannot call `lock` on behalf of an account\n    mapping(address => bool) public blockThirdPartyActions;\n\n    address[] public rewardTokens;\n    mapping(address => bool) public isRewardToken;\n\n    // reward token address => queued rewards\n    mapping(address => uint256) public queuedRewards;\n\n    // reward token address => week => rewards\n    mapping(address => mapping(uint256 => uint256)) public weeklyRewards;\n\n    // user address => last claimed week\n    mapping(address => uint256) public lastClaimedWeek;\n\n    mapping(address => bool) public access;\n\n    IVlQuoV2 public vlQuoV2;\n\n    event LockCreated(address indexed _user, uint256 _amount, uint256 _weeks);\n\n    event LockExtended(\n        address indexed _user,\n        uint256 _amount,\n        uint256 _oldWeeks,\n        uint256 _newWeeks\n    );\n\n    event Unlocked(\n        address indexed _user,\n        uint256 _amount,\n        uint256 _lastUnlockedWeek\n    );\n\n    event RewardTokenAdded(address indexed _rewardToken);\n\n    event RewardAdded(address indexed _rewardToken, uint256 _reward);\n\n    event RewardPaid(\n        address indexed _user,\n        address indexed _rewardToken,\n        uint256 _reward\n    );\n\n    event AccessSet(address indexed _address, bool _status);\n\n    event Migrated(address indexed _user, uint256 _amount, uint256 _weeks);\n\n    function initialize() public initializer {\n        __Ownable_init();\n    }\n\n    function setParams(\n        address _quo,\n        address _wom,\n        address _womDepositor,\n        address _qWomRewards,\n        address _qWomToken,\n        address _booster\n    ) external onlyOwner {\n        require(address(quo) == address(0), \"!init\");\n\n        require(_quo != address(0), \"invalid _quo!\");\n        require(_wom != address(0), \"invalid _wom!\");\n        require(_womDepositor != address(0), \"invalid _womDepositor!\");\n        require(_qWomRewards != address(0), \"invalid _qWomRewards!\");\n        require(_qWomToken != address(0), \"invalid _qWomToken!\");\n        require(_booster != address(0), \"invalid _booster!\");\n\n        quo = IERC20(_quo);\n        wom = _wom;\n\n        womDepositor = _womDepositor;\n        qWomRewards = _qWomRewards;\n        qWomToken = IERC20(_qWomToken);\n\n        booster = _booster;\n        setAccess(_booster, true);\n    }\n\n    function setVlQuoV2(address _vlQuoV2) external onlyOwner {\n        require(_vlQuoV2 != address(0), \"invalid _vlQuoV2!\");\n\n        vlQuoV2 = IVlQuoV2(_vlQuoV2);\n\n        quo.safeApprove(_vlQuoV2, 0);\n        quo.safeApprove(_vlQuoV2, type(uint256).max);\n    }\n\n    function userWeight(address _user) external view returns (uint256) {\n        return userLockData[_user].weeklyWeight[_getCurWeek()];\n    }\n\n    function userWeightAt(address _user, uint256 _week)\n        public\n        view\n        returns (uint256)\n    {\n        return userLockData[_user].weeklyWeight[_week];\n    }\n\n    function userUnlock(address _user) external view returns (uint256) {\n        return userLockData[_user].weeklyUnlock[_getCurWeek()];\n    }\n\n    function userUnlockAt(address _user, uint256 _week)\n        external\n        view\n        returns (uint256)\n    {\n        return userLockData[_user].weeklyUnlock[_week];\n    }\n\n    function totalWeight() public view returns (uint256) {\n        return weeklyTotalWeight[_getCurWeek()];\n    }\n\n    function totalWeightAt(uint256 _week) public view returns (uint256) {\n        return weeklyTotalWeight[_week];\n    }\n\n    function getActiveLocks(address _user)\n        external\n        view\n        returns (uint256[2][] memory)\n    {\n        uint256 nextWeek = _getNextWeek();\n        uint256[] memory unlocks = new uint256[](MAX_LOCK_WEEKS + 1);\n        uint256 unlockNum = 0;\n        for (uint256 i = 0; i <= MAX_LOCK_WEEKS; i++) {\n            unlocks[i] = userLockData[_user].weeklyUnlock[\n                nextWeek.add(i.mul(WEEK))\n            ];\n            if (unlocks[i] > 0) {\n                unlockNum++;\n            }\n        }\n        uint256[2][] memory lockData = new uint256[2][](unlockNum);\n        uint256 j = 0;\n        for (uint256 i = 0; i <= MAX_LOCK_WEEKS; i++) {\n            if (unlocks[i] > 0) {\n                lockData[j] = [nextWeek.add(i.mul(WEEK)), unlocks[i]];\n                j++;\n            }\n        }\n        return lockData;\n    }\n\n    // Get the amount of quo in expired locks that is eligible to be released\n    function getUnlockable(address _user) public view returns (uint256) {\n        uint256 finishedWeek = _getCurWeek();\n\n        LockData storage data = userLockData[_user];\n\n        // return 0 if user has never locked\n        if (data.lastUnlockedWeek == 0) {\n            return 0;\n        }\n        uint256 amount;\n\n        for (\n            uint256 cur = data.lastUnlockedWeek.add(WEEK);\n            cur <= finishedWeek;\n            cur = cur.add(WEEK)\n        ) {\n            amount = amount.add(data.weeklyUnlock[cur]);\n        }\n        return amount;\n    }\n\n    // Allow or block third-party calls on behalf of the caller\n    function setBlockThirdPartyActions(bool _block) external {\n        blockThirdPartyActions[msg.sender] = _block;\n    }\n\n    function lock(\n        address _user,\n        uint256 _amount,\n        uint256 _weeks\n    ) external {\n        require(_user != address(0), \"invalid _user!\");\n        require(\n            msg.sender == _user || !blockThirdPartyActions[_user],\n            \"Cannot lock on behalf of this account\"\n        );\n\n        require(_weeks > 0, \"Min 1 week\");\n        require(_weeks <= MAX_LOCK_WEEKS, \"Exceeds MAX_LOCK_WEEKS\");\n        require(_amount > 0, \"Amount must be nonzero\");\n\n        quo.safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint256 start = _getNextWeek();\n        _increaseAmount(_user, start, _amount, _weeks, 0);\n\n        uint256 end = start.add(_weeks.mul(WEEK));\n        userLockData[_user].weeklyUnlock[end] = userLockData[_user]\n            .weeklyUnlock[end]\n            .add(_amount);\n\n        uint256 curWeek = _getCurWeek();\n        if (userLockData[_user].lastUnlockedWeek == 0) {\n            userLockData[_user].lastUnlockedWeek = curWeek;\n        }\n        if (lastClaimedWeek[_user] == 0) {\n            lastClaimedWeek[_user] = curWeek;\n        }\n\n        emit LockCreated(_user, _amount, _weeks);\n    }\n\n    /**\n        @notice Extend the length of an existing lock.\n        @param _amount Amount of tokens to extend the lock for. When the value given equals\n                       the total size of the existing lock, the entire lock is moved.\n                       If the amount is less, then the lock is effectively split into\n                       two locks, with a portion of the balance extended to the new length\n                       and the remaining balance at the old length.\n        @param _weeks The number of weeks for the lock that is being extended.\n        @param _newWeeks The number of weeks to extend the lock until.\n     */\n    function extendLock(\n        uint256 _amount,\n        uint256 _weeks,\n        uint256 _newWeeks\n    ) external {\n        require(_weeks > 0, \"Min 1 week\");\n        require(_newWeeks <= MAX_LOCK_WEEKS, \"Exceeds MAX_LOCK_WEEKS\");\n        require(_weeks < _newWeeks, \"newWeeks must be greater than weeks\");\n        require(_amount > 0, \"Amount must be nonzero\");\n\n        LockData storage data = userLockData[msg.sender];\n        uint256 start = _getNextWeek();\n        uint256 oldEnd = start.add(_weeks.mul(WEEK));\n        require(_amount <= data.weeklyUnlock[oldEnd], \"invalid amount\");\n        data.weeklyUnlock[oldEnd] = data.weeklyUnlock[oldEnd].sub(_amount);\n        uint256 end = start.add(_newWeeks.mul(WEEK));\n        data.weeklyUnlock[end] = data.weeklyUnlock[end].add(_amount);\n\n        _increaseAmount(msg.sender, start, _amount, _newWeeks, _weeks);\n        emit LockExtended(msg.sender, _amount, _weeks, _newWeeks);\n    }\n\n    function unlock() external {\n        uint256 amount = getUnlockable(msg.sender);\n        if (amount != 0) {\n            quo.safeTransfer(msg.sender, amount);\n        }\n\n        uint256 lastUnlockedWeek = _getCurWeek();\n        userLockData[msg.sender].lastUnlockedWeek = lastUnlockedWeek;\n\n        emit Unlocked(msg.sender, amount, lastUnlockedWeek);\n    }\n\n    function migrate() external {\n        uint256 nextWeek = _getNextWeek();\n\n        LockData storage data = userLockData[msg.sender];\n\n        for (uint256 i = 0; i <= MAX_LOCK_WEEKS; i++) {\n            uint256 cur = nextWeek.add(i.mul(WEEK));\n            if (data.weeklyWeight[cur] > 0) {\n                weeklyTotalWeight[cur] = weeklyTotalWeight[cur].sub(\n                    data.weeklyWeight[cur]\n                );\n                data.weeklyWeight[cur] = 0;\n            }\n            uint256 unlockAmount = data.weeklyUnlock[cur];\n            if (i == 0 || unlockAmount == 0) {\n                continue;\n            }\n\n            vlQuoV2.lock(msg.sender, unlockAmount, i);\n            data.weeklyUnlock[cur] = 0;\n\n            emit Migrated(msg.sender, unlockAmount, i);\n        }\n    }\n\n    function _getCurWeek() internal view returns (uint256) {\n        return block.timestamp.div(WEEK).mul(WEEK);\n    }\n\n    function _getNextWeek() internal view returns (uint256) {\n        return _getCurWeek().add(WEEK);\n    }\n\n    /**\n        @dev Increase the amount within a lock weight array over a given time period\n     */\n    function _increaseAmount(\n        address _user,\n        uint256 _start,\n        uint256 _amount,\n        uint256 _rounds,\n        uint256 _oldRounds\n    ) internal {\n        LockData storage data = userLockData[_user];\n        for (uint256 i = 0; i < _rounds; i++) {\n            uint256 curWeek = _start.add(i.mul(WEEK));\n            uint256 amount = _amount.mul(_rounds.sub(i));\n            if (i < _oldRounds) {\n                amount = amount.sub(_amount.mul(_oldRounds.sub(i)));\n            }\n            data.weeklyWeight[curWeek] = data.weeklyWeight[curWeek].add(amount);\n            weeklyTotalWeight[curWeek] = weeklyTotalWeight[curWeek].add(amount);\n        }\n    }\n\n    function earned(address _user, address _rewardToken)\n        public\n        view\n        returns (uint256)\n    {\n        // return 0 if user has never locked\n        if (lastClaimedWeek[_user] == 0) {\n            return 0;\n        }\n\n        uint256 startWeek = lastClaimedWeek[_user].add(WEEK);\n        uint256 finishedWeek = _getCurWeek().sub(WEEK);\n        uint256 amount = 0;\n\n        for (\n            uint256 cur = startWeek;\n            cur <= finishedWeek;\n            cur = cur.add(WEEK)\n        ) {\n            uint256 totalW = totalWeightAt(cur);\n            if (totalW == 0) {\n                continue;\n            }\n            amount = amount.add(\n                weeklyRewards[_rewardToken][cur]\n                    .mul(userWeightAt(_user, cur))\n                    .div(totalW)\n            );\n        }\n        return amount;\n    }\n\n    function getRewardTokensLength() external view returns (uint256) {\n        return rewardTokens.length;\n    }\n\n    function _addRewardToken(address _rewardToken) internal {\n        if (isRewardToken[_rewardToken]) {\n            return;\n        }\n        rewardTokens.push(_rewardToken);\n        isRewardToken[_rewardToken] = true;\n\n        emit RewardTokenAdded(_rewardToken);\n    }\n\n    function _getReward(address _user, bool _stake) internal {\n        uint256 userLastClaimedWeek = lastClaimedWeek[_user];\n        if (\n            userLastClaimedWeek == 0 ||\n            userLastClaimedWeek >= _getCurWeek().sub(WEEK)\n        ) {\n            return;\n        }\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            address rewardToken = rewardTokens[i];\n            uint256 reward = earned(_user, rewardToken);\n            if (reward > 0) {\n                if (rewardToken == address(qWomToken)) {\n                    if (_stake) {\n                        qWomToken.safeApprove(qWomRewards, 0);\n                        qWomToken.safeApprove(qWomRewards, reward);\n                        IBaseRewardPool(qWomRewards).stakeFor(_user, reward);\n                    } else {\n                        qWomToken.safeTransfer(_user, reward);\n                    }\n                } else {\n                    // other token\n                    IERC20(rewardToken).safeTransfer(_user, reward);\n                }\n\n                emit RewardPaid(_user, rewardToken, reward);\n            }\n        }\n\n        lastClaimedWeek[_user] = _getCurWeek().sub(WEEK);\n    }\n\n    function getReward(bool _stake) external {\n        _getReward(msg.sender, _stake);\n    }\n\n    function donate(address _rewardToken, uint256 _amount) external {\n        require(isRewardToken[_rewardToken], \"invalid token\");\n        IERC20(_rewardToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n        queuedRewards[_rewardToken] = queuedRewards[_rewardToken].add(_amount);\n    }\n\n    function queueNewRewards(address _rewardToken, uint256 _rewards) external {\n        require(access[msg.sender], \"!auth\");\n\n        _addRewardToken(_rewardToken);\n\n        IERC20(_rewardToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _rewards\n        );\n\n        if (totalWeight() == 0) {\n            queuedRewards[_rewardToken] = queuedRewards[_rewardToken].add(\n                _rewards\n            );\n            return;\n        }\n\n        _rewards = _rewards.add(queuedRewards[_rewardToken]);\n        queuedRewards[_rewardToken] = 0;\n\n        uint256 curWeek = _getCurWeek();\n        weeklyRewards[_rewardToken][curWeek] = weeklyRewards[_rewardToken][\n            curWeek\n        ].add(_rewards);\n        emit RewardAdded(_rewardToken, _rewards);\n    }\n\n    function setAccess(address _address, bool _status) public onlyOwner {\n        access[_address] = _status;\n        emit AccessSet(_address, _status);\n    }\n}\n"
    },
    "contracts/VlQuoV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\n\nimport \"./Interfaces/IVlQuoV2.sol\";\nimport \"./Interfaces/IBribeManager.sol\";\n\ncontract VlQuoV2 is\n    IVlQuoV2,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable\n{\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    IERC20 public override quo;\n\n    IBribeManager public bribeManager;\n\n    address public treasury;\n\n    uint256 public maxLockLength;\n\n    uint256 public constant FEE_DENOMINATOR = 10000;\n    uint256 public override unlockGracePeriod;\n    uint256 public override unlockPunishment;\n\n    uint256 public constant WEEK = 86400 * 7;\n    uint256 public constant MAX_LOCK_WEEKS = 52;\n\n    struct LockInfo {\n        uint256 quoAmount;\n        uint256 vlQuoAmount;\n        uint256 lockTime;\n        uint256 unlockTime;\n    }\n\n    mapping(address => LockInfo[]) public userLocks;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    mapping(uint256 => uint256) public weeklyTotalWeight;\n    mapping(address => mapping(uint256 => uint256)) public weeklyUserWeight;\n\n    // when set to true, other accounts cannot call `lock` on behalf of an account\n    mapping(address => bool) public override blockThirdPartyActions;\n\n    address[] public rewardTokens;\n    mapping(address => bool) public isRewardToken;\n\n    // reward token address => queued rewards\n    mapping(address => uint256) public queuedRewards;\n\n    // reward token address => week => rewards\n    mapping(address => mapping(uint256 => uint256)) public weeklyRewards;\n\n    // user address => last claimed week\n    mapping(address => uint256) public lastClaimedWeek;\n\n    mapping(address => bool) public access;\n\n    mapping(address => bool) public allowedLocker;\n\n    mapping(address => uint256) private _lockerTotalSupply;\n    mapping(address => mapping(address => uint256)) private _lockerBalances;\n\n    modifier onlyAllowedLocker() {\n        require(allowedLocker[msg.sender], \"!auth\");\n        _;\n    }\n\n    function initialize() external initializer {\n        __Ownable_init();\n        __ReentrancyGuard_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function setParams(\n        address _quo,\n        address _bribeManager,\n        address _treasury\n    ) external onlyOwner {\n        require(address(quo) == address(0), \"params have already been set\");\n\n        require(_quo != address(0), \"invalid _quo!\");\n        require(_bribeManager != address(0), \"invalid _bribeManager!\");\n        require(_treasury != address(0), \"invalid _treasury!\");\n\n        quo = IERC20(_quo);\n        bribeManager = IBribeManager(_bribeManager);\n        treasury = _treasury;\n\n        maxLockLength = 10000;\n\n        unlockGracePeriod = 14 days;\n        unlockPunishment = 300;\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function setMaxLockLength(uint256 _maxLockLength) external onlyOwner {\n        maxLockLength = _maxLockLength;\n    }\n\n    function setUnlockGracePeriod(uint256 _unlockGracePeriod)\n        external\n        onlyOwner\n    {\n        unlockGracePeriod = _unlockGracePeriod;\n    }\n\n    function setUnlockPunishment(uint256 _unlockPunishment) external onlyOwner {\n        unlockPunishment = _unlockPunishment;\n    }\n\n    // Allow or block third-party calls on behalf of the caller\n    function setBlockThirdPartyActions(bool _block) external {\n        blockThirdPartyActions[msg.sender] = _block;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _user) public view override returns (uint256) {\n        return _balances[_user];\n    }\n\n    function getUserLocks(address _user)\n        external\n        view\n        returns (LockInfo[] memory)\n    {\n        return userLocks[_user];\n    }\n\n    function lock(\n        address _user,\n        uint256 _amount,\n        uint256 _weeks\n    ) external override nonReentrant whenNotPaused {\n        require(_user != address(0), \"invalid _user!\");\n        require(\n            msg.sender == _user || !blockThirdPartyActions[_user],\n            \"Cannot lock on behalf of this account\"\n        );\n\n        require(_weeks > 0, \"Min 1 week\");\n        require(_weeks <= MAX_LOCK_WEEKS, \"Exceeds MAX_LOCK_WEEKS\");\n        require(_amount > 0, \"Amount must be nonzero\");\n\n        require(userLocks[_user].length < maxLockLength, \"locks too much\");\n\n        quo.safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint256 vlQuoAmount = _amount.mul(_weeks);\n        uint256 unlockTime = _getNextWeek().add(_weeks.mul(WEEK));\n        userLocks[_user].push(\n            LockInfo(_amount, vlQuoAmount, block.timestamp, unlockTime)\n        );\n\n        _increaseBalance(address(0), _user, vlQuoAmount);\n\n        for (uint256 week = _getNextWeek(); week < unlockTime; week += WEEK) {\n            weeklyTotalWeight[week] = weeklyTotalWeight[week].add(vlQuoAmount);\n            weeklyUserWeight[_user][week] = weeklyUserWeight[_user][week].add(\n                vlQuoAmount\n            );\n        }\n\n        if (lastClaimedWeek[_user] == 0) {\n            lastClaimedWeek[_user] = _getCurWeek();\n        }\n\n        emit Locked(_user, _amount, _weeks);\n    }\n\n    function unlock(uint256 _slot) external nonReentrant whenNotPaused {\n        uint256 length = userLocks[msg.sender].length;\n        require(_slot < length, \"wut?\");\n\n        LockInfo memory lockInfo = userLocks[msg.sender][_slot];\n        require(lockInfo.unlockTime <= block.timestamp, \"not yet meh\");\n\n        uint256 punishment;\n        if (block.timestamp > lockInfo.unlockTime.add(unlockGracePeriod)) {\n            punishment = block\n                .timestamp\n                .sub(lockInfo.unlockTime.add(unlockGracePeriod))\n                .div(WEEK)\n                .add(1)\n                .mul(unlockPunishment)\n                .mul(lockInfo.quoAmount)\n                .div(FEE_DENOMINATOR);\n            punishment = Math.min(punishment, lockInfo.quoAmount);\n        }\n\n        // remove slot\n        if (_slot != length - 1) {\n            userLocks[msg.sender][_slot] = userLocks[msg.sender][length - 1];\n        }\n        userLocks[msg.sender].pop();\n\n        if (punishment > 0) {\n            quo.safeTransfer(treasury, punishment);\n        }\n        quo.safeTransfer(msg.sender, lockInfo.quoAmount.sub(punishment));\n\n        _decreaseBalance(address(0), msg.sender, lockInfo.vlQuoAmount);\n\n        emit Unlocked(\n            msg.sender,\n            lockInfo.unlockTime,\n            lockInfo.quoAmount,\n            lockInfo.vlQuoAmount\n        );\n    }\n\n    function getReward() external nonReentrant {\n        uint256 userLastClaimedWeek = lastClaimedWeek[msg.sender];\n        if (\n            userLastClaimedWeek == 0 ||\n            userLastClaimedWeek >= _getCurWeek().sub(WEEK)\n        ) {\n            return;\n        }\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            address rewardToken = rewardTokens[i];\n            uint256 reward = earned(msg.sender, rewardToken);\n            if (reward > 0) {\n                IERC20(rewardToken).safeTransfer(msg.sender, reward);\n\n                emit RewardPaid(msg.sender, rewardToken, reward);\n            }\n        }\n\n        lastClaimedWeek[msg.sender] = _getCurWeek().sub(WEEK);\n    }\n\n    function getRewardTokensLength() external view returns (uint256) {\n        return rewardTokens.length;\n    }\n\n    function _addRewardToken(address _rewardToken) internal {\n        if (isRewardToken[_rewardToken]) {\n            return;\n        }\n        rewardTokens.push(_rewardToken);\n        isRewardToken[_rewardToken] = true;\n\n        emit RewardTokenAdded(_rewardToken);\n    }\n\n    function earned(address _user, address _rewardToken)\n        public\n        view\n        returns (uint256)\n    {\n        // return 0 if user has never locked\n        if (lastClaimedWeek[_user] == 0) {\n            return 0;\n        }\n\n        uint256 startWeek = lastClaimedWeek[_user].add(WEEK);\n        uint256 finishedWeek = _getCurWeek().sub(WEEK);\n        uint256 amount = 0;\n\n        for (\n            uint256 cur = startWeek;\n            cur <= finishedWeek;\n            cur = cur.add(WEEK)\n        ) {\n            uint256 totalW = weeklyTotalWeight[cur];\n            if (totalW == 0) {\n                continue;\n            }\n            amount = amount.add(\n                weeklyRewards[_rewardToken][cur]\n                    .mul(weeklyUserWeight[_user][cur])\n                    .div(totalW)\n            );\n        }\n        return amount;\n    }\n\n    function donate(address _rewardToken, uint256 _amount) external {\n        require(isRewardToken[_rewardToken], \"invalid token\");\n        IERC20(_rewardToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n        queuedRewards[_rewardToken] = queuedRewards[_rewardToken].add(_amount);\n    }\n\n    function queueNewRewards(address _rewardToken, uint256 _rewards) external {\n        require(access[msg.sender], \"!auth\");\n\n        _addRewardToken(_rewardToken);\n\n        IERC20(_rewardToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _rewards\n        );\n\n        uint256 curWeek = _getCurWeek();\n        uint256 totalWeight = weeklyTotalWeight[curWeek];\n        if (totalWeight == 0) {\n            queuedRewards[_rewardToken] = queuedRewards[_rewardToken].add(\n                _rewards\n            );\n            return;\n        }\n\n        _rewards = _rewards.add(queuedRewards[_rewardToken]);\n        queuedRewards[_rewardToken] = 0;\n\n        weeklyRewards[_rewardToken][curWeek] = weeklyRewards[_rewardToken][\n            curWeek\n        ].add(_rewards);\n        emit RewardAdded(_rewardToken, _rewards);\n    }\n\n    function setAccess(address _address, bool _status) external onlyOwner {\n        require(_address != address(0), \"invalid _address!\");\n\n        access[_address] = _status;\n        emit AccessSet(_address, _status);\n    }\n\n    function setAllowedLocker(address _locker, bool _allowed)\n        external\n        onlyOwner\n    {\n        require(_locker != address(0), \"invalid _address!\");\n\n        allowedLocker[_locker] = _allowed;\n        emit AllowedLockerSet(_locker, _allowed);\n    }\n\n    function increaseBalance(address _user, uint256 _amount)\n        external\n        override\n        onlyAllowedLocker\n    {\n        _increaseBalance(msg.sender, _user, _amount);\n    }\n\n    function decreaseBalance(address _user, uint256 _amount)\n        external\n        override\n        onlyAllowedLocker\n    {\n        _decreaseBalance(msg.sender, _user, _amount);\n    }\n\n    function _increaseBalance(\n        address _locker,\n        address _user,\n        uint256 _amount\n    ) internal {\n        if (_locker != address(0)) {\n            _lockerTotalSupply[_locker] = _lockerTotalSupply[_locker].add(\n                _amount\n            );\n            _lockerBalances[_locker][_user] = _lockerBalances[_locker][_user]\n                .add(_amount);\n        }\n        _totalSupply = _totalSupply.add(_amount);\n        uint256 newBal = _balances[_user].add(_amount);\n        _balances[_user] = newBal;\n        emit BalanceUpdated(_user, newBal);\n    }\n\n    function _decreaseBalance(\n        address _locker,\n        address _user,\n        uint256 _amount\n    ) internal {\n        if (_locker != address(0)) {\n            _lockerTotalSupply[_locker] = _lockerTotalSupply[_locker].sub(\n                _amount\n            );\n            _lockerBalances[_locker][_user] = _lockerBalances[_locker][_user]\n                .sub(_amount);\n        }\n        _totalSupply = _totalSupply.sub(_amount);\n        uint256 newBal = _balances[_user].sub(_amount);\n        _balances[_user] = newBal;\n        require(\n            bribeManager.getUserTotalVote(_user) <= newBal,\n            \"Too much vote cast\"\n        );\n        emit BalanceUpdated(_user, newBal);\n    }\n\n    function _getCurWeek() internal view returns (uint256) {\n        return block.timestamp.div(WEEK).mul(WEEK);\n    }\n\n    function _getNextWeek() internal view returns (uint256) {\n        return _getCurWeek().add(WEEK);\n    }\n}\n"
    },
    "contracts/WombatBooster.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./Interfaces/ISmartConvertor.sol\";\nimport \"./Interfaces/IWombatBooster.sol\";\nimport \"./Interfaces/IWombatVoterProxy.sol\";\nimport \"./Interfaces/IDepositToken.sol\";\nimport \"./Interfaces/IWomDepositor.sol\";\nimport \"./Interfaces/IQuollToken.sol\";\nimport \"./Interfaces/IBaseRewardPool.sol\";\nimport \"./lib/TransferHelper.sol\";\n\ncontract WombatBooster is IWombatBooster, OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using TransferHelper for address;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    address public wom;\n\n    uint256 public vlQuoIncentive; // incentive to quo lockers\n    uint256 public qWomIncentive; //incentive to wom stakers\n    uint256 public quoIncentive; //incentive to quo stakers\n    uint256 public platformFee; //possible fee to build treasury\n    uint256 public constant MaxFees = 2500;\n    uint256 public constant FEE_DENOMINATOR = 10000;\n\n    address public voterProxy;\n    address public quo;\n    address public vlQuo;\n    address public treasury;\n    address public quoRewardPool; //quo reward pool\n    address public qWomRewardPool; //qWom rewards(wom)\n\n    bool public isShutdown;\n\n    struct PoolInfo {\n        address lptoken;\n        address token;\n        uint256 masterWombatPid;\n        address rewardPool;\n        bool shutdown;\n    }\n\n    //index(pid) -> pool\n    PoolInfo[] public override poolInfo;\n\n    address public womDepositor;\n    address public qWom;\n\n    address public smartConvertor;\n\n    uint256 public earmarkIncentive;\n\n    mapping(uint256 => address) public pidToMasterWombat;\n\n    mapping(uint256 => EnumerableSet.AddressSet) pidToRewardTokens;\n\n    mapping(uint256 => mapping(address => uint256)) public pidToPendingRewards;\n\n    bool public earmarkOnOperation;\n\n    address public quoMinter;\n\n    function initialize() public initializer {\n        __Ownable_init();\n    }\n\n    /// SETTER SECTION ///\n\n    function setParams(\n        address _wom,\n        address _voterProxy,\n        address _womDepositor,\n        address _qWom,\n        address _quo,\n        address _vlQuo,\n        address _quoRewardPool,\n        address _qWomRewardPool,\n        address _treasury\n    ) external onlyOwner {\n        require(voterProxy == address(0), \"params has already been set\");\n\n        require(_wom != address(0), \"invalid _wom!\");\n        require(_voterProxy != address(0), \"invalid _voterProxy!\");\n        require(_womDepositor != address(0), \"invalid _womDepositor!\");\n        require(_qWom != address(0), \"invalid _qWom!\");\n        require(_quo != address(0), \"invalid _quo!\");\n        require(_vlQuo != address(0), \"invalid _vlQuo!\");\n        require(_quoRewardPool != address(0), \"invalid _quoRewardPool!\");\n        require(_qWomRewardPool != address(0), \"invalid _qWomRewardPool!\");\n        require(_treasury != address(0), \"invalid _treasury!\");\n\n        isShutdown = false;\n\n        wom = _wom;\n\n        voterProxy = _voterProxy;\n        womDepositor = _womDepositor;\n        qWom = _qWom;\n        quo = _quo;\n        vlQuo = _vlQuo;\n\n        quoRewardPool = _quoRewardPool;\n        qWomRewardPool = _qWomRewardPool;\n\n        treasury = _treasury;\n\n        vlQuoIncentive = 500;\n        qWomIncentive = 1000;\n        quoIncentive = 100;\n        platformFee = 100;\n    }\n\n    function setVlQuo(address _vlQuo) external onlyOwner {\n        require(_vlQuo != address(0), \"invalid _vlQuo!\");\n\n        vlQuo = _vlQuo;\n\n        emit VlQuoAddressChanged(_vlQuo);\n    }\n\n    function setFees(\n        uint256 _vlQuoIncentive,\n        uint256 _qWomIncentive,\n        uint256 _quoIncentive,\n        uint256 _platformFee\n    ) external onlyOwner {\n        uint256 total = _qWomIncentive\n            .add(_vlQuoIncentive)\n            .add(_quoIncentive)\n            .add(_platformFee);\n        require(total <= MaxFees, \">MaxFees\");\n\n        //values must be within certain ranges\n        require(\n            _vlQuoIncentive >= 0 && _vlQuoIncentive <= 700,\n            \"invalid _vlQuoIncentive\"\n        );\n        require(\n            _qWomIncentive >= 800 && _qWomIncentive <= 1500,\n            \"invalid _qWomIncentive\"\n        );\n        require(\n            _quoIncentive >= 0 && _quoIncentive <= 500,\n            \"invalid _quoIncentive\"\n        );\n        require(\n            _platformFee >= 0 && _platformFee <= 1000,\n            \"invalid _platformFee\"\n        );\n\n        vlQuoIncentive = _vlQuoIncentive;\n        qWomIncentive = _qWomIncentive;\n        quoIncentive = _quoIncentive;\n        platformFee = _platformFee;\n    }\n\n    function setTreasury(address _treasury) external onlyOwner {\n        treasury = _treasury;\n    }\n\n    function setSmartConvertor(address _smartConvertor) external onlyOwner {\n        smartConvertor = _smartConvertor;\n    }\n\n    function setEarmarkIncentive(uint256 _earmarkIncentive) external onlyOwner {\n        require(\n            _earmarkIncentive >= 10 && _earmarkIncentive <= 100,\n            \"invalid _earmarkIncentive\"\n        );\n        earmarkIncentive = _earmarkIncentive;\n    }\n\n    function setEarmarkOnOperation(\n        bool _earmarkOnOperation\n    ) external onlyOwner {\n        earmarkOnOperation = _earmarkOnOperation;\n    }\n\n    function setQuoMinter(address _quoMinter) external onlyOwner {\n        quoMinter = _quoMinter;\n    }\n\n    /// END SETTER SECTION ///\n\n    function poolLength() external view override returns (uint256) {\n        return poolInfo.length;\n    }\n\n    //create a new pool\n    function addPool(\n        address _masterWombat,\n        uint256 _masterWombatPid,\n        address _token,\n        address _rewardPool\n    ) external onlyOwner returns (bool) {\n        require(!isShutdown, \"!add\");\n\n        //the next pool's pid\n        uint256 pid = poolInfo.length;\n\n        // config wom rewards\n        IBaseRewardPool(_rewardPool).setParams(address(this), pid, _token, wom);\n\n        //add the new pool\n        poolInfo.push(\n            PoolInfo({\n                lptoken: _masterWombat == address(0)\n                    ? IWombatVoterProxy(voterProxy).getLpToken(_masterWombatPid)\n                    : IWombatVoterProxy(voterProxy).getLpTokenV2(\n                        _masterWombat,\n                        _masterWombatPid\n                    ),\n                token: _token,\n                masterWombatPid: _masterWombatPid,\n                rewardPool: _rewardPool,\n                shutdown: false\n            })\n        );\n\n        if (_masterWombat != address(0)) {\n            pidToMasterWombat[pid] = _masterWombat;\n        }\n\n        return true;\n    }\n\n    //shutdown pool\n    function shutdownPool(uint256 _pid) public onlyOwner returns (bool) {\n        PoolInfo storage pool = poolInfo[_pid];\n        require(!pool.shutdown, \"already shutdown!\");\n\n        //withdraw from gauge\n        address[] memory rewardTokens;\n        uint256[] memory rewardAmounts;\n        if (pidToMasterWombat[_pid] == address(0)) {\n            (rewardTokens, rewardAmounts) = IWombatVoterProxy(voterProxy)\n                .withdrawAll(pool.masterWombatPid);\n        } else {\n            (rewardTokens, rewardAmounts) = IWombatVoterProxy(voterProxy)\n                .withdrawAllV2(pidToMasterWombat[_pid], pool.masterWombatPid);\n        }\n        _updatePendingRewards(_pid, rewardTokens, rewardAmounts);\n\n        // rewards are claimed when withdrawing\n        _earmarkRewards(_pid, address(0));\n\n        pool.shutdown = true;\n        return true;\n    }\n\n    //shutdown this contract.\n    //  unstake and pull all lp tokens to this address\n    //  only allow withdrawals\n    function shutdownSystem() external onlyOwner {\n        isShutdown = true;\n\n        for (uint256 i = 0; i < poolInfo.length; i++) {\n            PoolInfo storage pool = poolInfo[i];\n            if (pool.shutdown) {\n                continue;\n            }\n\n            shutdownPool(i);\n        }\n    }\n\n    function migrate(\n        uint256[] calldata _pids,\n        address _newMasterWombat\n    ) external onlyOwner {\n        for (uint256 i = 0; i < _pids.length; i++) {\n            uint256 pid = _pids[i];\n            PoolInfo storage pool = poolInfo[pid];\n            require(\n                pidToMasterWombat[pid] != _newMasterWombat,\n                \"invalid _newMasterWombat\"\n            );\n\n            (\n                uint256 newPid,\n                address[] memory rewardTokens,\n                uint256[] memory rewardAmounts\n            ) = IWombatVoterProxy(voterProxy).migrate(\n                    pool.masterWombatPid,\n                    pidToMasterWombat[pid],\n                    _newMasterWombat\n                );\n            _updatePendingRewards(pid, rewardTokens, rewardAmounts);\n\n            _earmarkRewards(pid, address(0));\n\n            pidToMasterWombat[pid] = _newMasterWombat;\n            pool.masterWombatPid = newPid;\n\n            emit Migrated(pid, _newMasterWombat);\n        }\n    }\n\n    //deposit lp tokens and stake\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        bool _stake\n    ) public override {\n        require(!isShutdown, \"shutdown\");\n        PoolInfo memory pool = poolInfo[_pid];\n        require(pool.shutdown == false, \"pool is closed\");\n\n        //send to proxy to stake\n        address lptoken = pool.lptoken;\n        IERC20(lptoken).safeTransferFrom(msg.sender, voterProxy, _amount);\n\n        //stake\n        address[] memory rewardTokens;\n        uint256[] memory rewardAmounts;\n        if (pidToMasterWombat[_pid] == address(0)) {\n            (rewardTokens, rewardAmounts) = IWombatVoterProxy(voterProxy)\n                .deposit(pool.masterWombatPid, _amount);\n        } else {\n            (rewardTokens, rewardAmounts) = IWombatVoterProxy(voterProxy)\n                .depositV2(\n                    pidToMasterWombat[_pid],\n                    pool.masterWombatPid,\n                    _amount\n                );\n        }\n        // rewards are claimed when depositing\n        _updatePendingRewards(_pid, rewardTokens, rewardAmounts);\n\n        if (earmarkOnOperation) {\n            _earmarkRewards(_pid, address(0));\n        }\n\n        address token = pool.token;\n        if (_stake) {\n            //mint here and send to rewards on user behalf\n            IDepositToken(token).mint(address(this), _amount);\n            address rewardContract = pool.rewardPool;\n            _approveTokenIfNeeded(token, rewardContract, _amount);\n            IBaseRewardPool(rewardContract).stakeFor(msg.sender, _amount);\n        } else {\n            //add user balance directly\n            IDepositToken(token).mint(msg.sender, _amount);\n        }\n\n        emit Deposited(msg.sender, _pid, _amount);\n    }\n\n    //deposit all lp tokens and stake\n    function depositAll(uint256 _pid, bool _stake) external returns (bool) {\n        address lptoken = poolInfo[_pid].lptoken;\n        uint256 balance = IERC20(lptoken).balanceOf(msg.sender);\n        deposit(_pid, balance, _stake);\n        return true;\n    }\n\n    //withdraw lp tokens\n    function _withdraw(\n        uint256 _pid,\n        uint256 _amount,\n        address _from,\n        address _to\n    ) internal {\n        PoolInfo memory pool = poolInfo[_pid];\n        address lptoken = pool.lptoken;\n\n        //remove lp balance\n        address token = pool.token;\n        IDepositToken(token).burn(_from, _amount);\n\n        //pull from gauge if not shutdown\n        // if shutdown tokens will be in this contract\n        if (!pool.shutdown) {\n            address[] memory rewardTokens;\n            uint256[] memory rewardAmounts;\n            if (pidToMasterWombat[_pid] == address(0)) {\n                (rewardTokens, rewardAmounts) = IWombatVoterProxy(voterProxy)\n                    .withdraw(pool.masterWombatPid, _amount);\n            } else {\n                (rewardTokens, rewardAmounts) = IWombatVoterProxy(voterProxy)\n                    .withdrawV2(\n                        pidToMasterWombat[_pid],\n                        pool.masterWombatPid,\n                        _amount\n                    );\n            }\n            // rewards are claimed when withdrawing\n            _updatePendingRewards(_pid, rewardTokens, rewardAmounts);\n\n            if (earmarkOnOperation) {\n                _earmarkRewards(_pid, address(0));\n            }\n        }\n\n        //return lp tokens\n        IERC20(lptoken).safeTransfer(_to, _amount);\n\n        emit Withdrawn(_to, _pid, _amount);\n    }\n\n    //withdraw lp tokens\n    function withdraw(uint256 _pid, uint256 _amount) public override {\n        _withdraw(_pid, _amount, msg.sender, msg.sender);\n    }\n\n    //withdraw all lp tokens\n    function withdrawAll(uint256 _pid) public {\n        address token = poolInfo[_pid].token;\n        uint256 userBal = IERC20(token).balanceOf(msg.sender);\n        withdraw(_pid, userBal);\n    }\n\n    // disperse wom and extra rewards to reward contracts\n    function _earmarkRewards(uint256 _pid, address _caller) internal {\n        PoolInfo memory pool = poolInfo[_pid];\n        //wom balance\n        uint256 womBal = pidToPendingRewards[_pid][wom];\n        emit WomClaimed(_pid, womBal);\n\n        if (womBal > 0) {\n            pidToPendingRewards[_pid][wom] = 0;\n\n            uint256 vlQuoIncentiveAmount = womBal.mul(vlQuoIncentive).div(\n                FEE_DENOMINATOR\n            );\n            uint256 qWomIncentiveAmount = womBal.mul(qWomIncentive).div(\n                FEE_DENOMINATOR\n            );\n            uint256 quoIncentiveAmount = womBal.mul(quoIncentive).div(\n                FEE_DENOMINATOR\n            );\n\n            uint256 earmarkIncentiveAmount = 0;\n            if (_caller != address(0) && earmarkIncentive > 0) {\n                earmarkIncentiveAmount = womBal.mul(earmarkIncentive).div(\n                    FEE_DENOMINATOR\n                );\n\n                //send incentives for calling\n                IERC20(wom).safeTransfer(_caller, earmarkIncentiveAmount);\n\n                emit EarmarkIncentiveSent(\n                    _pid,\n                    _caller,\n                    earmarkIncentiveAmount\n                );\n            }\n\n            //send treasury\n            if (platformFee > 0) {\n                //only subtract after address condition check\n                uint256 _platform = womBal.mul(platformFee).div(\n                    FEE_DENOMINATOR\n                );\n                womBal = womBal.sub(_platform);\n                IERC20(wom).safeTransfer(treasury, _platform);\n            }\n\n            //remove incentives from balance\n            womBal = womBal\n                .sub(vlQuoIncentiveAmount)\n                .sub(qWomIncentiveAmount)\n                .sub(quoIncentiveAmount)\n                .sub(earmarkIncentiveAmount);\n\n            //send wom to lp provider reward contract\n            address rewardContract = pool.rewardPool;\n            _approveTokenIfNeeded(wom, rewardContract, womBal);\n            IRewards(rewardContract).queueNewRewards(wom, womBal);\n\n            //check if there are extra rewards\n            for (uint256 i = 0; i < pidToRewardTokens[_pid].length(); i++) {\n                address bonusToken = pidToRewardTokens[_pid].at(i);\n                if (bonusToken == wom) {\n                    // wom was dispersed above\n                    continue;\n                }\n                uint256 bonusTokenBalance = pidToPendingRewards[_pid][\n                    bonusToken\n                ];\n                if (bonusTokenBalance > 0) {\n                    if (AddressLib.isPlatformToken(bonusToken)) {\n                        IRewards(rewardContract).queueNewRewards{\n                            value: bonusTokenBalance\n                        }(bonusToken, bonusTokenBalance);\n                    } else {\n                        _approveTokenIfNeeded(\n                            bonusToken,\n                            rewardContract,\n                            bonusTokenBalance\n                        );\n                        IRewards(rewardContract).queueNewRewards(\n                            bonusToken,\n                            bonusTokenBalance\n                        );\n                    }\n                    pidToPendingRewards[_pid][bonusToken] = 0;\n                }\n            }\n\n            //send qWom to vlQuo\n            if (vlQuoIncentiveAmount > 0) {\n                uint256 qWomAmount = _convertWomToQWom(vlQuoIncentiveAmount);\n\n                _approveTokenIfNeeded(qWom, vlQuo, qWomAmount);\n                IRewards(vlQuo).queueNewRewards(qWom, qWomAmount);\n            }\n\n            //send wom to qWom reward contract\n            if (qWomIncentiveAmount > 0) {\n                _approveTokenIfNeeded(wom, qWomRewardPool, qWomIncentiveAmount);\n                IRewards(qWomRewardPool).queueNewRewards(\n                    wom,\n                    qWomIncentiveAmount\n                );\n            }\n\n            //send qWom to quo reward contract\n            if (quoIncentiveAmount > 0) {\n                uint256 qWomAmount = _convertWomToQWom(quoIncentiveAmount);\n\n                _approveTokenIfNeeded(qWom, quoRewardPool, qWomAmount);\n                IRewards(quoRewardPool).queueNewRewards(qWom, qWomAmount);\n            }\n        }\n    }\n\n    function earmarkRewards(uint256 _pid) external returns (bool) {\n        require(!isShutdown, \"shutdown\");\n        PoolInfo memory pool = poolInfo[_pid];\n        require(pool.shutdown == false, \"pool is closed\");\n\n        //claim wom and bonus token rewards\n        address[] memory rewardTokens;\n        uint256[] memory rewardAmounts;\n        if (pidToMasterWombat[_pid] == address(0)) {\n            (rewardTokens, rewardAmounts) = IWombatVoterProxy(voterProxy)\n                .claimRewards(pool.masterWombatPid);\n        } else {\n            (rewardTokens, rewardAmounts) = IWombatVoterProxy(voterProxy)\n                .claimRewardsV2(pidToMasterWombat[_pid], pool.masterWombatPid);\n        }\n        _updatePendingRewards(_pid, rewardTokens, rewardAmounts);\n\n        _earmarkRewards(_pid, msg.sender);\n        return true;\n    }\n\n    function getRewardTokensForPid(\n        uint256 _pid\n    ) external view returns (address[] memory) {\n        address[] memory rewardTokens = new address[](\n            pidToRewardTokens[_pid].length()\n        );\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            rewardTokens[i] = pidToRewardTokens[_pid].at(i);\n        }\n        return rewardTokens;\n    }\n\n    //callback from reward contract when wom is received.\n    function rewardClaimed(\n        uint256 _pid,\n        address _account,\n        address _token,\n        uint256 _amount\n    ) external override {\n        address rewardContract = poolInfo[_pid].rewardPool;\n        require(\n            msg.sender == rewardContract || msg.sender == qWomRewardPool,\n            \"!auth\"\n        );\n\n        if (_token != wom || isShutdown) {\n            return;\n        }\n\n        //mint reward tokens\n        if (quoMinter != address(0)) {\n            IQuollToken(quoMinter).mint(_account, _amount);\n        } else {\n            IQuollToken(quo).mint(_account, _amount);\n        }\n    }\n\n    function _updatePendingRewards(\n        uint256 _pid,\n        address[] memory _rewardTokens,\n        uint256[] memory _rewardAmounts\n    ) internal {\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\n            address rewardToken = _rewardTokens[i];\n            uint256 rewardAmount = _rewardAmounts[i];\n            if (rewardToken == address(0) || rewardAmount == 0) {\n                continue;\n            }\n            pidToRewardTokens[_pid].add(rewardToken);\n            pidToPendingRewards[_pid][rewardToken] = pidToPendingRewards[_pid][\n                rewardToken\n            ].add(rewardAmount);\n        }\n    }\n\n    function _convertWomToQWom(uint256 _amount) internal returns (uint256) {\n        if (smartConvertor != address(0)) {\n            _approveTokenIfNeeded(wom, smartConvertor, _amount);\n            return ISmartConvertor(smartConvertor).deposit(_amount);\n        } else {\n            _approveTokenIfNeeded(wom, womDepositor, _amount);\n            IWomDepositor(womDepositor).deposit(_amount, false);\n            return _amount;\n        }\n    }\n\n    function _approveTokenIfNeeded(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (IERC20(_token).allowance(address(this), _to) < _amount) {\n            IERC20(_token).safeApprove(_to, 0);\n            IERC20(_token).safeApprove(_to, type(uint256).max);\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/WombatVoterProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./Interfaces/IVirtualBalanceRewardPool.sol\";\nimport \"./Interfaces/IWombatVoterProxy.sol\";\nimport \"./Interfaces/Wombat/IBribe.sol\";\nimport \"./Interfaces/Wombat/IMasterWombatV2.sol\";\nimport \"./Interfaces/Wombat/IMasterWombatV3.sol\";\nimport \"./Interfaces/Wombat/IVeWom.sol\";\nimport \"./Interfaces/Wombat/IVoter.sol\";\nimport \"./lib/TransferHelper.sol\";\n\ncontract WombatVoterProxy is IWombatVoterProxy, OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using TransferHelper for address;\n\n    address public wom;\n    IMasterWombatV2 public masterWombat;\n    address public veWom;\n\n    address public booster;\n    address public depositor;\n\n    IVoter public voter;\n    address public bribeManager;\n    uint256 constant FEE_DENOMINATOR = 10000;\n    uint256 public bribeCallerFee;\n    uint256 public bribeProtocolFee;\n    address public bribeFeeCollector;\n\n    modifier onlyBooster() {\n        require(msg.sender == booster, \"!auth\");\n        _;\n    }\n\n    modifier onlyDepositor() {\n        require(msg.sender == depositor, \"!auth\");\n        _;\n    }\n\n    function initialize() public initializer {\n        __Ownable_init();\n    }\n\n    function setParams(\n        address _masterWombat,\n        address _booster,\n        address _depositor\n    ) external onlyOwner {\n        require(booster == address(0), \"!init\");\n\n        require(_masterWombat != address(0), \"invalid _masterWombat!\");\n        require(_booster != address(0), \"invalid _booster!\");\n        require(_depositor != address(0), \"invalid _depositor!\");\n\n        masterWombat = IMasterWombatV2(_masterWombat);\n        wom = masterWombat.wom();\n        veWom = masterWombat.veWom();\n\n        booster = _booster;\n        depositor = _depositor;\n\n        emit BoosterUpdated(_booster);\n        emit DepositorUpdated(_depositor);\n    }\n\n    function setVoter(address _voter) external onlyOwner {\n        require(_voter != address(0), \"invalid _voter!\");\n\n        voter = IVoter(_voter);\n    }\n\n    function setBribeManager(address _bribeManager) external onlyOwner {\n        require(_bribeManager != address(0), \"invald _bribeManager!\");\n\n        bribeManager = _bribeManager;\n    }\n\n    function setBribeCallerFee(uint256 _bribeCallerFee) external onlyOwner {\n        require(_bribeCallerFee <= 100, \"invalid _bribeCallerFee!\");\n        bribeCallerFee = _bribeCallerFee;\n    }\n\n    function setBribeProtocolFee(uint256 _bribeProtocolFee) external onlyOwner {\n        require(_bribeProtocolFee <= 2000, \"invalid _bribeProtocolFee!\");\n        bribeProtocolFee = _bribeProtocolFee;\n    }\n\n    function setBribeFeeCollector(address _bribeFeeCollector)\n        external\n        onlyOwner\n    {\n        require(\n            _bribeFeeCollector != address(0),\n            \"invalid _bribeFeeCollector!\"\n        );\n        bribeFeeCollector = _bribeFeeCollector;\n    }\n\n    function getLpToken(uint256 _pid) external view override returns (address) {\n        (address token, , , , , , ) = masterWombat.poolInfo(_pid);\n        return token;\n    }\n\n    function getLpTokenV2(address _masterWombat, uint256 _pid)\n        public\n        view\n        override\n        returns (address)\n    {\n        address token;\n        if (_masterWombat == address(masterWombat)) {\n            (token, , , , , , ) = masterWombat.poolInfo(_pid);\n        } else {\n            (token, , , , , , , ) = IMasterWombatV3(_masterWombat).poolInfoV3(\n                _pid\n            );\n        }\n\n        return token;\n    }\n\n    function getBonusTokens(uint256 _pid)\n        public\n        view\n        override\n        returns (address[] memory)\n    {\n        (address[] memory bonusTokenAddresses, ) = masterWombat\n            .rewarderBonusTokenInfo(_pid);\n        for (uint256 i = 0; i < bonusTokenAddresses.length; i++) {\n            if (bonusTokenAddresses[i] == address(0)) {\n                // bnb\n                bonusTokenAddresses[i] = AddressLib.PLATFORM_TOKEN_ADDRESS;\n            }\n        }\n        return bonusTokenAddresses;\n    }\n\n    function getBonusTokensV2(address _masterWombat, uint256 _pid)\n        public\n        view\n        override\n        returns (address[] memory)\n    {\n        // V2 & V3 have the same interface\n        (address[] memory bonusTokenAddresses, ) = IMasterWombatV3(\n            _masterWombat\n        ).rewarderBonusTokenInfo(_pid);\n        for (uint256 i = 0; i < bonusTokenAddresses.length; i++) {\n            if (bonusTokenAddresses[i] == address(0)) {\n                // bnb\n                bonusTokenAddresses[i] = AddressLib.PLATFORM_TOKEN_ADDRESS;\n            }\n        }\n        return bonusTokenAddresses;\n    }\n\n    function deposit(uint256 _pid, uint256 _amount)\n        external\n        override\n        onlyBooster\n        returns (address[] memory rewardTokens, uint256[] memory rewardAmounts)\n    {\n        (address token, , , , , , ) = masterWombat.poolInfo(_pid);\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        require(balance >= _amount, \"insufficient balance\");\n\n        IERC20(token).safeApprove(address(masterWombat), 0);\n        IERC20(token).safeApprove(address(masterWombat), balance);\n        masterWombat.deposit(_pid, balance);\n        (rewardTokens, rewardAmounts) = _claimRewards(_pid);\n\n        emit Deposited(_pid, balance);\n    }\n\n    function depositV2(\n        address _masterWombat,\n        uint256 _pid,\n        uint256 _amount\n    )\n        external\n        override\n        onlyBooster\n        returns (address[] memory rewardTokens, uint256[] memory rewardAmounts)\n    {\n        address token = getLpTokenV2(_masterWombat, _pid);\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        require(balance >= _amount, \"insufficient balance\");\n\n        IERC20(token).safeApprove(_masterWombat, 0);\n        IERC20(token).safeApprove(_masterWombat, balance);\n        // V2 & V3 have the same interface\n        IMasterWombatV3(_masterWombat).deposit(_pid, balance);\n        (rewardTokens, rewardAmounts) = _claimRewardsV2(_masterWombat, _pid);\n\n        emit DepositedV2(_masterWombat, _pid, balance);\n    }\n\n    // Withdraw partial funds\n    function withdraw(uint256 _pid, uint256 _amount)\n        public\n        override\n        onlyBooster\n        returns (address[] memory rewardTokens, uint256[] memory rewardAmounts)\n    {\n        (address token, , , , , , ) = masterWombat.poolInfo(_pid);\n        uint256 _balance = IERC20(token).balanceOf(address(this));\n        if (_balance < _amount) {\n            masterWombat.withdraw(_pid, _amount.sub(_balance));\n            (rewardTokens, rewardAmounts) = _claimRewards(_pid);\n        }\n        IERC20(token).safeTransfer(booster, _amount);\n\n        emit Withdrawn(_pid, _amount);\n    }\n\n    // Withdraw partial funds\n    function withdrawV2(\n        address _masterWombat,\n        uint256 _pid,\n        uint256 _amount\n    )\n        public\n        override\n        onlyBooster\n        returns (address[] memory rewardTokens, uint256[] memory rewardAmounts)\n    {\n        address token = getLpTokenV2(_masterWombat, _pid);\n        uint256 _balance = IERC20(token).balanceOf(address(this));\n        if (_balance < _amount) {\n            // V2 & V3 have the same interface\n            IMasterWombatV3(_masterWombat).withdraw(\n                _pid,\n                _amount.sub(_balance)\n            );\n            (rewardTokens, rewardAmounts) = _claimRewardsV2(\n                _masterWombat,\n                _pid\n            );\n        }\n        IERC20(token).safeTransfer(booster, _amount);\n\n        emit WithdrawnV2(_masterWombat, _pid, _amount);\n    }\n\n    function withdrawAll(uint256 _pid)\n        external\n        override\n        onlyBooster\n        returns (address[] memory, uint256[] memory)\n    {\n        (address token, , , , , , ) = masterWombat.poolInfo(_pid);\n        uint256 amount = balanceOfPool(_pid).add(\n            IERC20(token).balanceOf(address(this))\n        );\n        return withdraw(_pid, amount);\n    }\n\n    function withdrawAllV2(address _masterWombat, uint256 _pid)\n        external\n        override\n        onlyBooster\n        returns (address[] memory, uint256[] memory)\n    {\n        address token = getLpTokenV2(_masterWombat, _pid);\n        uint256 amount = balanceOfPoolV2(_masterWombat, _pid).add(\n            IERC20(token).balanceOf(address(this))\n        );\n        return withdrawV2(_masterWombat, _pid, amount);\n    }\n\n    function claimRewards(uint256 _pid)\n        external\n        override\n        onlyBooster\n        returns (address[] memory, uint256[] memory)\n    {\n        // call deposit with _amount == 0 to claim current rewards\n        masterWombat.deposit(_pid, 0);\n\n        return _claimRewards(_pid);\n    }\n\n    function claimRewardsV2(address _masterWombat, uint256 _pid)\n        external\n        override\n        onlyBooster\n        returns (address[] memory, uint256[] memory)\n    {\n        // call deposit with _amount == 0 to claim current rewards\n        IMasterWombatV3(_masterWombat).deposit(_pid, 0);\n\n        return _claimRewardsV2(_masterWombat, _pid);\n    }\n\n    // send claimed rewards to booster\n    function _claimRewards(uint256 _pid)\n        internal\n        returns (address[] memory rewardTokens, uint256[] memory rewardAmounts)\n    {\n        address[] memory bonusTokenAddresses = getBonusTokens(_pid);\n        rewardTokens = new address[](1 + bonusTokenAddresses.length);\n        rewardAmounts = new uint256[](1 + bonusTokenAddresses.length);\n\n        uint256 _balance = IERC20(wom).balanceOf(address(this));\n        rewardTokens[0] = wom;\n        rewardAmounts[0] = _balance;\n        IERC20(wom).safeTransfer(booster, _balance);\n        emit RewardsClaimed(_pid, _balance);\n\n        for (uint256 i = 0; i < bonusTokenAddresses.length; i++) {\n            address bonusTokenAddress = bonusTokenAddresses[i];\n            uint256 bonusTokenBalance = TransferHelper.balanceOf(\n                bonusTokenAddress,\n                address(this)\n            );\n            rewardTokens[1 + i] = bonusTokenAddress;\n            rewardAmounts[1 + i] = bonusTokenBalance;\n            if (bonusTokenBalance == 0) {\n                continue;\n            }\n            bonusTokenAddress.safeTransferToken(booster, bonusTokenBalance);\n\n            emit BonusRewardsClaimed(\n                _pid,\n                bonusTokenAddress,\n                bonusTokenBalance\n            );\n        }\n    }\n\n    // send claimed rewards to booster\n    function _claimRewardsV2(address _masterWombat, uint256 _pid)\n        internal\n        returns (address[] memory rewardTokens, uint256[] memory rewardAmounts)\n    {\n        address[] memory bonusTokenAddresses = getBonusTokensV2(\n            _masterWombat,\n            _pid\n        );\n        rewardTokens = new address[](1 + bonusTokenAddresses.length);\n        rewardAmounts = new uint256[](1 + bonusTokenAddresses.length);\n\n        uint256 _balance = IERC20(wom).balanceOf(address(this));\n        rewardTokens[0] = wom;\n        rewardAmounts[0] = _balance;\n        IERC20(wom).safeTransfer(booster, _balance);\n        emit RewardsClaimedV2(_masterWombat, _pid, _balance);\n\n        for (uint256 i = 0; i < bonusTokenAddresses.length; i++) {\n            address bonusTokenAddress = bonusTokenAddresses[i];\n            uint256 bonusTokenBalance = TransferHelper.balanceOf(\n                bonusTokenAddress,\n                address(this)\n            );\n            rewardTokens[1 + i] = bonusTokenAddress;\n            rewardAmounts[1 + i] = bonusTokenBalance;\n            if (bonusTokenBalance == 0) {\n                continue;\n            }\n            bonusTokenAddress.safeTransferToken(booster, bonusTokenBalance);\n\n            emit BonusRewardsClaimedV2(\n                _masterWombat,\n                _pid,\n                bonusTokenAddress,\n                bonusTokenBalance\n            );\n        }\n    }\n\n    function balanceOfPool(uint256 _pid)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        (uint256 amount, , , ) = masterWombat.userInfo(_pid, address(this));\n        return amount;\n    }\n\n    function balanceOfPoolV2(address _masterWombat, uint256 _pid)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        (uint256 amount, , , ) = IMasterWombatV3(_masterWombat).userInfo(\n            _pid,\n            address(this)\n        );\n        return amount;\n    }\n\n    function migrate(\n        uint256 _pid,\n        address _masterWombat,\n        address _newMasterWombat\n    )\n        external\n        override\n        onlyBooster\n        returns (\n            uint256 newPid,\n            address[] memory rewardTokens,\n            uint256[] memory rewardAmounts\n        )\n    {\n        if (_masterWombat == address(0)) {\n            _masterWombat = address(masterWombat);\n        }\n\n        address token = getLpTokenV2(_masterWombat, _pid);\n        // will revert if not exist\n        newPid = IMasterWombatV3(_newMasterWombat).getAssetPid(token);\n        uint256 balanceOfOld = balanceOfPoolV2(_masterWombat, _pid);\n        uint256 balanceofNewBefore = balanceOfPoolV2(_newMasterWombat, newPid);\n\n        uint256[] memory pids = new uint256[](1);\n        pids[0] = _pid;\n        IMasterWombatV2(_masterWombat).migrate(pids);\n\n        uint256 balanceOfNewAfter = balanceOfPoolV2(_newMasterWombat, newPid);\n        require(\n            balanceOfNewAfter.sub(balanceofNewBefore) >= balanceOfOld,\n            \"migration failed\"\n        );\n\n        (rewardTokens, rewardAmounts) = _claimRewardsV2(_masterWombat, _pid);\n    }\n\n    function lockWom(uint256 _lockDays) external override onlyDepositor {\n        uint256 balance = IERC20(wom).balanceOf(address(this));\n\n        if (balance == 0) {\n            return;\n        }\n\n        IERC20(wom).safeApprove(veWom, 0);\n        IERC20(wom).safeApprove(veWom, balance);\n\n        IVeWom(veWom).mint(balance, _lockDays);\n\n        emit WomLocked(balance, _lockDays);\n    }\n\n    function unlockWom(uint256 _slot) external onlyOwner {\n        IVeWom(veWom).burn(_slot);\n\n        emit WomUnlocked(_slot);\n    }\n\n    function vote(\n        address[] calldata _lpVote,\n        int256[] calldata _deltas,\n        address[] calldata _rewarders,\n        address _caller\n    )\n        external\n        override\n        returns (address[][] memory rewardTokens, uint256[][] memory feeAmounts)\n    {\n        require(msg.sender == bribeManager, \"!auth\");\n        uint256 length = _lpVote.length;\n        require(length == _rewarders.length, \"Not good rewarder length\");\n        uint256[][] memory bribeRewards = voter.vote(_lpVote, _deltas);\n\n        rewardTokens = new address[][](length);\n        feeAmounts = new uint256[][](length);\n\n        for (uint256 i = 0; i < length; i++) {\n            uint256[] memory rewardAmounts = bribeRewards[i];\n            (, , , , , , address bribesContract) = voter.infos(_lpVote[i]);\n            feeAmounts[i] = new uint256[](rewardAmounts.length);\n            if (bribesContract != address(0)) {\n                rewardTokens[i] = _getBribeRewardTokens(bribesContract);\n                for (uint256 j = 0; j < rewardAmounts.length; j++) {\n                    uint256 rewardAmount = rewardAmounts[j];\n                    if (rewardAmount > 0) {\n                        uint256 protocolFee = bribeFeeCollector != address(0)\n                            ? rewardAmount.mul(bribeProtocolFee).div(\n                                FEE_DENOMINATOR\n                            )\n                            : 0;\n                        if (protocolFee > 0) {\n                            rewardTokens[i][j].safeTransferToken(\n                                bribeFeeCollector,\n                                protocolFee\n                            );\n                        }\n                        uint256 callerFee = _caller != address(0)\n                            ? rewardAmount.mul(bribeCallerFee).div(\n                                FEE_DENOMINATOR\n                            )\n                            : 0;\n                        if (callerFee != 0) {\n                            rewardTokens[i][j].safeTransferToken(\n                                bribeManager,\n                                callerFee\n                            );\n                            feeAmounts[i][j] = callerFee;\n                        }\n                        rewardAmount = rewardAmount.sub(protocolFee).sub(\n                            callerFee\n                        );\n\n                        if (AddressLib.isPlatformToken(rewardTokens[i][j])) {\n                            IVirtualBalanceRewardPool(_rewarders[i])\n                                .queueNewRewards{value: rewardAmount}(\n                                rewardTokens[i][j],\n                                rewardAmount\n                            );\n                        } else {\n                            _approveTokenIfNeeded(\n                                rewardTokens[i][j],\n                                _rewarders[i],\n                                rewardAmount\n                            );\n                            IVirtualBalanceRewardPool(_rewarders[i])\n                                .queueNewRewards(\n                                    rewardTokens[i][j],\n                                    rewardAmount\n                                );\n                        }\n                    }\n                }\n            }\n        }\n\n        emit Voted(_lpVote, _deltas, _rewarders, _caller);\n    }\n\n    function pendingBribeCallerFee(address[] calldata _pendingPools)\n        external\n        view\n        override\n        returns (\n            address[][] memory rewardTokens,\n            uint256[][] memory callerFeeAmount\n        )\n    {\n        // Warning: Arguments do not take into account repeated elements in the pendingPools list\n        (\n            address[][] memory bribeTokenAddresses,\n            ,\n            uint256[][] memory bribeRewards\n        ) = voter.pendingBribes(_pendingPools, address(this));\n        uint256 length = bribeTokenAddresses.length;\n        rewardTokens = new address[][](length);\n        callerFeeAmount = new uint256[][](length);\n        for (uint256 i; i < length; i++) {\n            rewardTokens[i] = new address[](bribeTokenAddresses[i].length);\n            callerFeeAmount[i] = new uint256[](bribeTokenAddresses[i].length);\n            for (uint256 j; j < bribeTokenAddresses[i].length; j++) {\n                // if rewardToken is 0, native token is used as reward token\n                if (bribeTokenAddresses[i][j] == address(0)) {\n                    rewardTokens[i][j] = AddressLib.PLATFORM_TOKEN_ADDRESS;\n                } else {\n                    rewardTokens[i][j] = bribeTokenAddresses[i][j];\n                }\n                callerFeeAmount[i][j] = bribeRewards[i][j]\n                    .mul(bribeCallerFee)\n                    .div(FEE_DENOMINATOR);\n            }\n        }\n    }\n\n    function _getBribeRewardTokens(address _bribesContract)\n        internal\n        view\n        returns (address[] memory)\n    {\n        address[] memory rewardTokens = IBribe(_bribesContract).rewardTokens();\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            // if rewardToken is 0, native token is used as reward token\n            if (rewardTokens[i] == address(0)) {\n                rewardTokens[i] = AddressLib.PLATFORM_TOKEN_ADDRESS;\n            }\n        }\n        return rewardTokens;\n    }\n\n    function _approveTokenIfNeeded(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (IERC20(_token).allowance(address(this), _to) < _amount) {\n            IERC20(_token).safeApprove(_to, 0);\n            IERC20(_token).safeApprove(_to, type(uint256).max);\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/WomDepositor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./Interfaces/IBaseRewardPool.sol\";\nimport \"./Interfaces/IWomDepositor.sol\";\nimport \"./Interfaces/IWombatVoterProxy.sol\";\nimport \"./Interfaces/IQuollExternalToken.sol\";\n\ncontract WomDepositor is IWomDepositor, OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    address public wom;\n\n    address public voterProxy;\n    address public qWOM;\n\n    uint256 private maxLockDays;\n    uint256 public lockTimeInterval;\n    uint256 public lastLockTime;\n\n    address public qWomRewardPool;\n\n    function initialize() public initializer {\n        __Ownable_init();\n    }\n\n    function setParams(\n        address _wom,\n        address _voterProxy,\n        address _qWOM,\n        address _qWomRewardPool\n    ) external onlyOwner {\n        require(voterProxy == address(0), \"params has already been set\");\n\n        require(_wom != address(0), \"invalid _wom!\");\n        require(_voterProxy != address(0), \"invalid _voterProxy!\");\n        require(_qWOM != address(0), \"invalid _qWOM!\");\n        require(_qWomRewardPool != address(0), \"invalid _qWomRewardPool!\");\n\n        wom = _wom;\n\n        voterProxy = _voterProxy;\n        qWOM = _qWOM;\n\n        qWomRewardPool = _qWomRewardPool;\n\n        maxLockDays = 1461;\n        lockTimeInterval = 1 days;\n        lastLockTime = block.timestamp;\n    }\n\n    function setQWomRewardPool(address _qWomRewardPool) external onlyOwner {\n        qWomRewardPool = _qWomRewardPool;\n    }\n\n    function setLockTimeInterval(uint256 _lockTimeInterval) external onlyOwner {\n        lockTimeInterval = _lockTimeInterval;\n    }\n\n    //lock wom\n    function _lockWom() internal {\n        uint256 womBalance = IERC20(wom).balanceOf(address(this));\n        if (womBalance > 0) {\n            IERC20(wom).safeTransfer(voterProxy, womBalance);\n        }\n\n        //increase amount\n        uint256 womBalanceVoterProxy = IERC20(wom).balanceOf(voterProxy);\n        if (womBalanceVoterProxy == 0) {\n            return;\n        }\n\n        //increase amount\n        IWombatVoterProxy(voterProxy).lockWom(maxLockDays);\n        lastLockTime = block.timestamp;\n    }\n\n    function lockWom() external onlyOwner {\n        _lockWom();\n    }\n\n    //deposit wom for qWom\n    function deposit(uint256 _amount, bool _stake) public override {\n        require(_amount > 0, \"!>0\");\n\n        if (block.timestamp > lastLockTime.add(lockTimeInterval)) {\n            //lock immediately, transfer directly to voterProxy to skip an erc20 transfer\n            IERC20(wom).safeTransferFrom(msg.sender, voterProxy, _amount);\n            _lockWom();\n        } else {\n            //move tokens here\n            IERC20(wom).safeTransferFrom(msg.sender, address(this), _amount);\n        }\n\n        if (!_stake) {\n            //mint for msg.sender\n            IQuollExternalToken(qWOM).mint(msg.sender, _amount);\n        } else {\n            //mint here\n            IQuollExternalToken(qWOM).mint(address(this), _amount);\n            //stake for msg.sender\n            IERC20(qWOM).safeApprove(qWomRewardPool, 0);\n            IERC20(qWOM).safeApprove(qWomRewardPool, _amount);\n            IBaseRewardPool(qWomRewardPool).stakeFor(msg.sender, _amount);\n        }\n\n        emit Deposited(msg.sender, _amount);\n    }\n\n    function depositAll(bool _stake) external {\n        uint256 womBal = IERC20(wom).balanceOf(msg.sender);\n        deposit(womBal, _stake);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}